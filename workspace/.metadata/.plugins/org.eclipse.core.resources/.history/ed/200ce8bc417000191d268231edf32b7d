// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.migracion_titan_ops_contratistas_descuentos_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Migracion_Titan_OPs_Contratistas_DESCUENTOS Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class Migracion_Titan_OPs_Contratistas_DESCUENTOS implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ano != null) {

				this.setProperty("ano", ano.toString());

			}

			if (mes != null) {

				this.setProperty("mes", mes.toString());

			}

		}

		public Integer ano;

		public Integer getAno() {
			return this.ano;
		}

		public Integer mes;

		public Integer getMes() {
			return this.mes;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Migracion_Titan_OPs_Contratistas_DESCUENTOS";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Migracion_Titan_OPs_Contratistas_DESCUENTOS.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									Migracion_Titan_OPs_Contratistas_DESCUENTOS.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class salida_excelStruct implements
			routines.system.IPersistableRow<salida_excelStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];

		public Double DTLL_DESC_ID;

		public Double getDTLL_DESC_ID() {
			return this.DTLL_DESC_ID;
		}

		public Double DTLL_DESC_VIGENCIA;

		public Double getDTLL_DESC_VIGENCIA() {
			return this.DTLL_DESC_VIGENCIA;
		}

		public Double DTLL_DESC_MES;

		public Double getDTLL_DESC_MES() {
			return this.DTLL_DESC_MES;
		}

		public Double DTLL_DESC_IDENT_DOCENTE;

		public Double getDTLL_DESC_IDENT_DOCENTE() {
			return this.DTLL_DESC_IDENT_DOCENTE;
		}

		public String DTLL_DESC_CDP;

		public String getDTLL_DESC_CDP() {
			return this.DTLL_DESC_CDP;
		}

		public String DTLL_DESC_CRP;

		public String getDTLL_DESC_CRP() {
			return this.DTLL_DESC_CRP;
		}

		public String DTLL_DESC_FACULTAD;

		public String getDTLL_DESC_FACULTAD() {
			return this.DTLL_DESC_FACULTAD;
		}

		public String DTLL_DESC_PROYECTO;

		public String getDTLL_DESC_PROYECTO() {
			return this.DTLL_DESC_PROYECTO;
		}

		public Integer DTLL_DESC_VALOR;

		public Integer getDTLL_DESC_VALOR() {
			return this.DTLL_DESC_VALOR;
		}

		public Double DTLL_NRO_NOM;

		public Double getDTLL_NRO_NOM() {
			return this.DTLL_NRO_NOM;
		}

		public Double DTLL_DESC_NRP_OP;

		public Double getDTLL_DESC_NRP_OP() {
			return this.DTLL_DESC_NRP_OP;
		}

		public String DTLL_DESC_NIT_ENTIDAD;

		public String getDTLL_DESC_NIT_ENTIDAD() {
			return this.DTLL_DESC_NIT_ENTIDAD;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length == 0) {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.DTLL_DESC_ID = null;
					} else {
						this.DTLL_DESC_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DTLL_DESC_VIGENCIA = null;
					} else {
						this.DTLL_DESC_VIGENCIA = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DTLL_DESC_MES = null;
					} else {
						this.DTLL_DESC_MES = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DTLL_DESC_IDENT_DOCENTE = null;
					} else {
						this.DTLL_DESC_IDENT_DOCENTE = dis.readDouble();
					}

					this.DTLL_DESC_CDP = readString(dis);

					this.DTLL_DESC_CRP = readString(dis);

					this.DTLL_DESC_FACULTAD = readString(dis);

					this.DTLL_DESC_PROYECTO = readString(dis);

					this.DTLL_DESC_VALOR = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DTLL_NRO_NOM = null;
					} else {
						this.DTLL_NRO_NOM = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DTLL_DESC_NRP_OP = null;
					} else {
						this.DTLL_DESC_NRP_OP = dis.readDouble();
					}

					this.DTLL_DESC_NIT_ENTIDAD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.DTLL_DESC_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DTLL_DESC_ID);
				}

				// Double

				if (this.DTLL_DESC_VIGENCIA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DTLL_DESC_VIGENCIA);
				}

				// Double

				if (this.DTLL_DESC_MES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DTLL_DESC_MES);
				}

				// Double

				if (this.DTLL_DESC_IDENT_DOCENTE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DTLL_DESC_IDENT_DOCENTE);
				}

				// String

				writeString(this.DTLL_DESC_CDP, dos);

				// String

				writeString(this.DTLL_DESC_CRP, dos);

				// String

				writeString(this.DTLL_DESC_FACULTAD, dos);

				// String

				writeString(this.DTLL_DESC_PROYECTO, dos);

				// Integer

				writeInteger(this.DTLL_DESC_VALOR, dos);

				// Double

				if (this.DTLL_NRO_NOM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DTLL_NRO_NOM);
				}

				// Double

				if (this.DTLL_DESC_NRP_OP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DTLL_DESC_NRP_OP);
				}

				// String

				writeString(this.DTLL_DESC_NIT_ENTIDAD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DTLL_DESC_ID=" + String.valueOf(DTLL_DESC_ID));
			sb.append(",DTLL_DESC_VIGENCIA="
					+ String.valueOf(DTLL_DESC_VIGENCIA));
			sb.append(",DTLL_DESC_MES=" + String.valueOf(DTLL_DESC_MES));
			sb.append(",DTLL_DESC_IDENT_DOCENTE="
					+ String.valueOf(DTLL_DESC_IDENT_DOCENTE));
			sb.append(",DTLL_DESC_CDP=" + DTLL_DESC_CDP);
			sb.append(",DTLL_DESC_CRP=" + DTLL_DESC_CRP);
			sb.append(",DTLL_DESC_FACULTAD=" + DTLL_DESC_FACULTAD);
			sb.append(",DTLL_DESC_PROYECTO=" + DTLL_DESC_PROYECTO);
			sb.append(",DTLL_DESC_VALOR=" + String.valueOf(DTLL_DESC_VALOR));
			sb.append(",DTLL_NRO_NOM=" + String.valueOf(DTLL_NRO_NOM));
			sb.append(",DTLL_DESC_NRP_OP=" + String.valueOf(DTLL_DESC_NRP_OP));
			sb.append(",DTLL_DESC_NIT_ENTIDAD=" + DTLL_DESC_NIT_ENTIDAD);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salida_excelStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];

		public int persona;

		public int getPersona() {
			return this.persona;
		}

		public int concepto;

		public int getConcepto() {
			return this.concepto;
		}

		public String nombre_concepto;

		public String getNombre_concepto() {
			return this.nombre_concepto;
		}

		public double valor_calculado;

		public double getValor_calculado() {
			return this.valor_calculado;
		}

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public Integer vigencia_contrato;

		public Integer getVigencia_contrato() {
			return this.vigencia_contrato;
		}

		public int mes;

		public int getMes() {
			return this.mes;
		}

		public int ano;

		public int getAno() {
			return this.ano;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length == 0) {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					this.persona = dis.readInt();

					this.concepto = dis.readInt();

					this.nombre_concepto = readString(dis);

					this.valor_calculado = dis.readDouble();

					this.numero_contrato = readString(dis);

					this.vigencia_contrato = readInteger(dis);

					this.mes = dis.readInt();

					this.ano = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.persona);

				// int

				dos.writeInt(this.concepto);

				// String

				writeString(this.nombre_concepto, dos);

				// double

				dos.writeDouble(this.valor_calculado);

				// String

				writeString(this.numero_contrato, dos);

				// Integer

				writeInteger(this.vigencia_contrato, dos);

				// int

				dos.writeInt(this.mes);

				// int

				dos.writeInt(this.ano);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("persona=" + String.valueOf(persona));
			sb.append(",concepto=" + String.valueOf(concepto));
			sb.append(",nombre_concepto=" + nombre_concepto);
			sb.append(",valor_calculado=" + String.valueOf(valor_calculado));
			sb.append(",numero_contrato=" + numero_contrato);
			sb.append(",vigencia_contrato=" + String.valueOf(vigencia_contrato));
			sb.append(",mes=" + String.valueOf(mes));
			sb.append(",ano=" + String.valueOf(ano));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];

		public int persona;

		public int getPersona() {
			return this.persona;
		}

		public int concepto;

		public int getConcepto() {
			return this.concepto;
		}

		public String nombre_concepto;

		public String getNombre_concepto() {
			return this.nombre_concepto;
		}

		public double valor_calculado;

		public double getValor_calculado() {
			return this.valor_calculado;
		}

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public Integer vigencia_contrato;

		public Integer getVigencia_contrato() {
			return this.vigencia_contrato;
		}

		public int mes;

		public int getMes() {
			return this.mes;
		}

		public int ano;

		public int getAno() {
			return this.ano;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length == 0) {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					this.persona = dis.readInt();

					this.concepto = dis.readInt();

					this.nombre_concepto = readString(dis);

					this.valor_calculado = dis.readDouble();

					this.numero_contrato = readString(dis);

					this.vigencia_contrato = readInteger(dis);

					this.mes = dis.readInt();

					this.ano = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.persona);

				// int

				dos.writeInt(this.concepto);

				// String

				writeString(this.nombre_concepto, dos);

				// double

				dos.writeDouble(this.valor_calculado);

				// String

				writeString(this.numero_contrato, dos);

				// Integer

				writeInteger(this.vigencia_contrato, dos);

				// int

				dos.writeInt(this.mes);

				// int

				dos.writeInt(this.ano);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("persona=" + String.valueOf(persona));
			sb.append(",concepto=" + String.valueOf(concepto));
			sb.append(",nombre_concepto=" + nombre_concepto);
			sb.append(",valor_calculado=" + String.valueOf(valor_calculado));
			sb.append(",numero_contrato=" + numero_contrato);
			sb.append(",vigencia_contrato=" + String.valueOf(vigencia_contrato));
			sb.append(",mes=" + String.valueOf(mes));
			sb.append(",ano=" + String.valueOf(ano));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_2Process(globalMap);
				tPostgresqlInput_3Process(globalMap);
				tPostgresqlInput_4Process(globalMap);
				tPostgresqlInput_5Process(globalMap);
				tPostgresqlInput_6Process(globalMap);

				row1Struct row1 = new row1Struct();
				salida_excelStruct salida_excel = new salida_excelStruct();

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("salida_excel"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				int nb_line_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = "/home/mariaalejandra9404/Escritorio/PruebaExcelOPsContratistasDescuentos.ods";
				java.io.File file_tFileOutputExcel_1 = new java.io.File(
						fileName_tFileOutputExcel_1);
				boolean isFileGenerated_tFileOutputExcel_1 = true;
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1
						.getParentFile();
				if (parentFile_tFileOutputExcel_1 != null
						&& !parentFile_tFileOutputExcel_1.exists()) {

					parentFile_tFileOutputExcel_1.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										fileName_tFileOutputExcel_1)), true,
						workbookSettings_tFileOutputExcel_1);

				writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
						.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_1 == null) {
					writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
							.createSheet("Sheet1",
									writeableWorkbook_tFileOutputExcel_1
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_1 = new int[19];
				for (int i_tFileOutputExcel_1 = 0; i_tFileOutputExcel_1 < 19; i_tFileOutputExcel_1++) {
					int fitCellViewSize_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
							.getColumnView(i_tFileOutputExcel_1).getSize();
					fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] = fitCellViewSize_tFileOutputExcel_1 / 256;
					if (fitCellViewSize_tFileOutputExcel_1 % 256 != 0) {
						fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] += 1;
					}
				}

				if (startRowNum_tFileOutputExcel_1 == 0) {
					// modif end
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(0,
									nb_line_tFileOutputExcel_1,
									"DTLLE_VIGENCIA"));
					// modif end
					fitWidth_tFileOutputExcel_1[0] = fitWidth_tFileOutputExcel_1[0] > 14 ? fitWidth_tFileOutputExcel_1[0]
							: 14;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(1,
									nb_line_tFileOutputExcel_1, "DTLLE_MES"));
					// modif end
					fitWidth_tFileOutputExcel_1[1] = fitWidth_tFileOutputExcel_1[1] > 9 ? fitWidth_tFileOutputExcel_1[1]
							: 9;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(2,
									nb_line_tFileOutputExcel_1,
									"DTLLE_IDENT_DOCENTE"));
					// modif end
					fitWidth_tFileOutputExcel_1[2] = fitWidth_tFileOutputExcel_1[2] > 19 ? fitWidth_tFileOutputExcel_1[2]
							: 19;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(3,
									nb_line_tFileOutputExcel_1, "DTLLE_CDP"));
					// modif end
					fitWidth_tFileOutputExcel_1[3] = fitWidth_tFileOutputExcel_1[3] > 9 ? fitWidth_tFileOutputExcel_1[3]
							: 9;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(4,
									nb_line_tFileOutputExcel_1, "DTLLE_CRP"));
					// modif end
					fitWidth_tFileOutputExcel_1[4] = fitWidth_tFileOutputExcel_1[4] > 9 ? fitWidth_tFileOutputExcel_1[4]
							: 9;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(5,
									nb_line_tFileOutputExcel_1,
									"DTLLE_FACULTAD"));
					// modif end
					fitWidth_tFileOutputExcel_1[5] = fitWidth_tFileOutputExcel_1[5] > 14 ? fitWidth_tFileOutputExcel_1[5]
							: 14;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(6,
									nb_line_tFileOutputExcel_1,
									"DTLLE_PROYECTO"));
					// modif end
					fitWidth_tFileOutputExcel_1[6] = fitWidth_tFileOutputExcel_1[6] > 14 ? fitWidth_tFileOutputExcel_1[6]
							: 14;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(7,
									nb_line_tFileOutputExcel_1,
									"DTLLE_VALOR_BRUTO"));
					// modif end
					fitWidth_tFileOutputExcel_1[7] = fitWidth_tFileOutputExcel_1[7] > 17 ? fitWidth_tFileOutputExcel_1[7]
							: 17;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(8,
									nb_line_tFileOutputExcel_1,
									"DTLLE_TIPO_NOMINA"));
					// modif end
					fitWidth_tFileOutputExcel_1[8] = fitWidth_tFileOutputExcel_1[8] > 17 ? fitWidth_tFileOutputExcel_1[8]
							: 17;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(9,
									nb_line_tFileOutputExcel_1,
									"DTLLE_CTA_BANCO"));
					// modif end
					fitWidth_tFileOutputExcel_1[9] = fitWidth_tFileOutputExcel_1[9] > 15 ? fitWidth_tFileOutputExcel_1[9]
							: 15;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(10,
									nb_line_tFileOutputExcel_1,
									"DTLLE_TIPO_CTA"));
					// modif end
					fitWidth_tFileOutputExcel_1[10] = fitWidth_tFileOutputExcel_1[10] > 14 ? fitWidth_tFileOutputExcel_1[10]
							: 14;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(11,
									nb_line_tFileOutputExcel_1, "DTLLE_BANCO"));
					// modif end
					fitWidth_tFileOutputExcel_1[11] = fitWidth_tFileOutputExcel_1[11] > 11 ? fitWidth_tFileOutputExcel_1[11]
							: 11;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(12,
									nb_line_tFileOutputExcel_1, "DTLLE_NRO_OP"));
					// modif end
					fitWidth_tFileOutputExcel_1[12] = fitWidth_tFileOutputExcel_1[12] > 12 ? fitWidth_tFileOutputExcel_1[12]
							: 12;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(13,
									nb_line_tFileOutputExcel_1, "DTLLE_NRO_NOM"));
					// modif end
					fitWidth_tFileOutputExcel_1[13] = fitWidth_tFileOutputExcel_1[13] > 13 ? fitWidth_tFileOutputExcel_1[13]
							: 13;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(14,
									nb_line_tFileOutputExcel_1,
									"DTLLE_PROCESADO"));
					// modif end
					fitWidth_tFileOutputExcel_1[14] = fitWidth_tFileOutputExcel_1[14] > 15 ? fitWidth_tFileOutputExcel_1[14]
							: 15;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(15,
									nb_line_tFileOutputExcel_1,
									"DTLLE_COD_BANCO"));
					// modif end
					fitWidth_tFileOutputExcel_1[15] = fitWidth_tFileOutputExcel_1[15] > 15 ? fitWidth_tFileOutputExcel_1[15]
							: 15;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(16,
									nb_line_tFileOutputExcel_1,
									"DTLLE_VALOR_BASE"));
					// modif end
					fitWidth_tFileOutputExcel_1[16] = fitWidth_tFileOutputExcel_1[16] > 16 ? fitWidth_tFileOutputExcel_1[16]
							: 16;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(17,
									nb_line_tFileOutputExcel_1,
									"DTLLE_COD_RUBRO"));
					// modif end
					fitWidth_tFileOutputExcel_1[17] = fitWidth_tFileOutputExcel_1[17] > 15 ? fitWidth_tFileOutputExcel_1[17]
							: 15;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(18,
									nb_line_tFileOutputExcel_1,
									"DTLLE_VALOR_SALARIO"));
					// modif end
					fitWidth_tFileOutputExcel_1[18] = fitWidth_tFileOutputExcel_1[18] > 19 ? fitWidth_tFileOutputExcel_1[18]
							: 19;
					nb_line_tFileOutputExcel_1++;
				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				salida_excelStruct salida_excel_tmp = new salida_excelStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_1);
				String dbUser_tPostgresqlInput_1 = "cadmititan";

				final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("d7c979824dbbd45f87f7bc21d51451fdf960e7387307b8cc");

				String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;

				String url_tPostgresqlInput_1 = "jdbc:postgresql://"
						+ "pgprod.udistritaloas.edu.co" + ":" + "5432" + "/"
						+ "udistrital_core_db";

				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_1, dbUser_tPostgresqlInput_1,
						dbPwd_tPostgresqlInput_1);

				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT dp.persona,dp.concepto, cn.nombre_concepto, dp.valor_calculado, dp.numero_contrato, dp.vigencia_contrato,p.mes,\n  p.ano \n FROM administrativa.detalle_preliquidacion dp, administrativa.preliquidacion p,\n  administrativa.concepto_nomina cn where p.id = dp.preliquidacion and p.mes=3 and p.ano=2019 and \n dp.concepto NOT IN (10,36,311) and cn.id = dp.concepto order by dp.persona;";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row1.persona = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row1.persona = rs_tPostgresqlInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row1.concepto = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(2) != null) {
								row1.concepto = rs_tPostgresqlInput_1.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row1.nombre_concepto = null;
						} else {

							row1.nombre_concepto = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row1.valor_calculado = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(4) != null) {
								row1.valor_calculado = rs_tPostgresqlInput_1
										.getDouble(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row1.numero_contrato = null;
						} else {

							row1.numero_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row1.vigencia_contrato = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(6) != null) {
								row1.vigencia_contrato = rs_tPostgresqlInput_1
										.getInt(6);
							} else {
								row1.vigencia_contrato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row1.mes = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(7) != null) {
								row1.mes = rs_tPostgresqlInput_1.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row1.ano = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(8) != null) {
								row1.ano = rs_tPostgresqlInput_1.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row2__id_proveedor = row1.persona;
							if (exprKeyValue_row2__id_proveedor == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.id_proveedor = (int) (Integer) exprKeyValue_row2__id_proveedor;
							}

							row2HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_1
									|| !tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.id_proveedor = '"
							// + row2HashKey.id_proveedor + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.numero_contrato_suscrito = row1.numero_contrato;

							row3HashKey.vigencia = row1.vigencia_contrato;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.numero_contrato_suscrito = '"
							// + row3HashKey.numero_contrato_suscrito +
							// "', row3.vigencia = '" + row3HashKey.vigencia +
							// "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row4HashKey.numero_contrato = row3.numero_contrato;

							row4HashKey.vigencia = row3.vigencia;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

							if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.numero_contrato = '"
							// + row4HashKey.numero_contrato +
							// "', row4.vigencia = '" + row4HashKey.vigencia +
							// "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.numero_contrato = row3.numero_contrato;

							Object exprKeyValue_row5__vigencia = row1.vigencia_contrato;
							if (exprKeyValue_row5__vigencia == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row5HashKey.vigencia = (int) (Integer) exprKeyValue_row5__vigencia;
							}

							row5HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row5.lookup(row5HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_1
									|| !tHash_Lookup_row5.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.numero_contrato = '"
							// + row5HashKey.numero_contrato +
							// "', row5.vigencia = '" + row5HashKey.vigencia +
							// "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row6__id = row5.supervisor;
							if (exprKeyValue_row6__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row6HashKey.id = (int) (Integer) exprKeyValue_row6__id;
							}

							row6HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row6.lookup(row6HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_1
									|| !tHash_Lookup_row6.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.id = '"
							// + row6HashKey.id + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							salida_excel = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 'salida_excel'
								salida_excel_tmp.DTLL_DESC_ID = row1.concepto;
								salida_excel_tmp.DTLL_DESC_VIGENCIA = row1.ano;
								salida_excel_tmp.DTLL_DESC_MES = row1.mes;
								salida_excel_tmp.DTLL_DESC_IDENT_DOCENTE = Mathematical
										.REAL(row2.num_documento);
								salida_excel_tmp.DTLL_DESC_CDP = (new Integer(
										row4.numero_cdp)).toString();
								salida_excel_tmp.DTLL_DESC_CRP = null;
								salida_excel_tmp.DTLL_DESC_FACULTAD = row6.dependencia_supervisor;
								salida_excel_tmp.DTLL_DESC_PROYECTO = row6.dependencia_supervisor;
								salida_excel_tmp.DTLL_DESC_VALOR = row1.valor_calculado;
								salida_excel_tmp.DTLL_NRO_NOM = 1.0;
								salida_excel_tmp.DTLL_DESC_NRP_OP = String
										.valueOf(Numeric.sequence("contador",
												1, 1));
								salida_excel_tmp.DTLL_DESC_NIT_ENTIDAD = null;
								salida_excel = salida_excel_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "salida_excel"
						if (salida_excel != null) {

							/**
							 * [tFileOutputExcel_1 main ] start
							 */

							currentComponent = "tFileOutputExcel_1";

							// salida_excel
							// salida_excel

							if (execStat) {
								runStat.updateStatOnConnection("salida_excel"
										+ iterateId, 1, 1);
							}

							if (salida_excel.DTLLE_VIGENCIA != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 0;

								jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_VIGENCIA);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_0_tFileOutputExcel_1);
								int currentWith_0_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_0_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_0_tFileOutputExcel_1 = currentWith_0_tFileOutputExcel_1 > 10 ? 10
										: currentWith_0_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[0] = fitWidth_tFileOutputExcel_1[0] > currentWith_0_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[0]
										: currentWith_0_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_MES != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 1;

								jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_MES);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_1_tFileOutputExcel_1);
								int currentWith_1_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_1_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_1_tFileOutputExcel_1 = currentWith_1_tFileOutputExcel_1 > 10 ? 10
										: currentWith_1_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[1] = fitWidth_tFileOutputExcel_1[1] > currentWith_1_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[1]
										: currentWith_1_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_IDENT_DOCENTE != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 2;

								jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_IDENT_DOCENTE);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_2_tFileOutputExcel_1);
								int currentWith_2_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_2_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_2_tFileOutputExcel_1 = currentWith_2_tFileOutputExcel_1 > 10 ? 10
										: currentWith_2_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[2] = fitWidth_tFileOutputExcel_1[2] > currentWith_2_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[2]
										: currentWith_2_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_CDP != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 3;

								jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_CDP);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_3_tFileOutputExcel_1);
								int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[3] = fitWidth_tFileOutputExcel_1[3] > currentWith_3_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[3]
										: currentWith_3_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_CRP != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 4;

								jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_CRP);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_4_tFileOutputExcel_1);
								int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[4] = fitWidth_tFileOutputExcel_1[4] > currentWith_4_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[4]
										: currentWith_4_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_FACULTAD != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 5;

								jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_FACULTAD);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_5_tFileOutputExcel_1);
								int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[5] = fitWidth_tFileOutputExcel_1[5] > currentWith_5_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[5]
										: currentWith_5_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_PROYECTO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 6;

								jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_PROYECTO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_6_tFileOutputExcel_1);
								int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[6] = fitWidth_tFileOutputExcel_1[6] > currentWith_6_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[6]
										: currentWith_6_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_VALOR_BRUTO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 7;

								jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_VALOR_BRUTO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_7_tFileOutputExcel_1);
								int currentWith_7_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_7_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_7_tFileOutputExcel_1 = currentWith_7_tFileOutputExcel_1 > 10 ? 10
										: currentWith_7_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[7] = fitWidth_tFileOutputExcel_1[7] > currentWith_7_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[7]
										: currentWith_7_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_TIPO_NOMINA != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 8;

								jxl.write.WritableCell cell_8_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_TIPO_NOMINA);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_8_tFileOutputExcel_1);
								int currentWith_8_tFileOutputExcel_1 = cell_8_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[8] = fitWidth_tFileOutputExcel_1[8] > currentWith_8_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[8]
										: currentWith_8_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_CTA_BANCO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 9;

								jxl.write.WritableCell cell_9_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_CTA_BANCO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_9_tFileOutputExcel_1);
								int currentWith_9_tFileOutputExcel_1 = cell_9_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[9] = fitWidth_tFileOutputExcel_1[9] > currentWith_9_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[9]
										: currentWith_9_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_TIPO_CTA != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 10;

								jxl.write.WritableCell cell_10_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_TIPO_CTA);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_10_tFileOutputExcel_1);
								int currentWith_10_tFileOutputExcel_1 = cell_10_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[10] = fitWidth_tFileOutputExcel_1[10] > currentWith_10_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[10]
										: currentWith_10_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_BANCO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 11;

								jxl.write.WritableCell cell_11_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_BANCO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_11_tFileOutputExcel_1);
								int currentWith_11_tFileOutputExcel_1 = cell_11_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[11] = fitWidth_tFileOutputExcel_1[11] > currentWith_11_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[11]
										: currentWith_11_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_NRO_OP != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 12;

								jxl.write.WritableCell cell_12_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_NRO_OP);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_12_tFileOutputExcel_1);
								int currentWith_12_tFileOutputExcel_1 = cell_12_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[12] = fitWidth_tFileOutputExcel_1[12] > currentWith_12_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[12]
										: currentWith_12_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_NRO_NOM != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 13;

								jxl.write.WritableCell cell_13_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_NRO_NOM);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_13_tFileOutputExcel_1);
								int currentWith_13_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_13_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_13_tFileOutputExcel_1 = currentWith_13_tFileOutputExcel_1 > 10 ? 10
										: currentWith_13_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[13] = fitWidth_tFileOutputExcel_1[13] > currentWith_13_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[13]
										: currentWith_13_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_PROCESADO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 14;

								jxl.write.WritableCell cell_14_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_PROCESADO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_14_tFileOutputExcel_1);
								int currentWith_14_tFileOutputExcel_1 = cell_14_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[14] = fitWidth_tFileOutputExcel_1[14] > currentWith_14_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[14]
										: currentWith_14_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_COD_BANCO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 15;

								jxl.write.WritableCell cell_15_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_COD_BANCO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_15_tFileOutputExcel_1);
								int currentWith_15_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_15_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_15_tFileOutputExcel_1 = currentWith_15_tFileOutputExcel_1 > 10 ? 10
										: currentWith_15_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[15] = fitWidth_tFileOutputExcel_1[15] > currentWith_15_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[15]
										: currentWith_15_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_VALOR_BASE != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 16;

								jxl.write.WritableCell cell_16_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_VALOR_BASE);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_16_tFileOutputExcel_1);
								int currentWith_16_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_16_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_16_tFileOutputExcel_1 = currentWith_16_tFileOutputExcel_1 > 10 ? 10
										: currentWith_16_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[16] = fitWidth_tFileOutputExcel_1[16] > currentWith_16_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[16]
										: currentWith_16_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_COD_RUBRO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 17;

								jxl.write.WritableCell cell_17_tFileOutputExcel_1 = new jxl.write.Label(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_COD_RUBRO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_17_tFileOutputExcel_1);
								int currentWith_17_tFileOutputExcel_1 = cell_17_tFileOutputExcel_1
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_1[17] = fitWidth_tFileOutputExcel_1[17] > currentWith_17_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[17]
										: currentWith_17_tFileOutputExcel_1 + 2;
							}

							if (salida_excel.DTLLE_VALOR_SALARIO != null) {

								// modif start

								columnIndex_tFileOutputExcel_1 = 18;

								jxl.write.WritableCell cell_18_tFileOutputExcel_1 = new jxl.write.Number(
										columnIndex_tFileOutputExcel_1,
										startRowNum_tFileOutputExcel_1
												+ nb_line_tFileOutputExcel_1,

										// modif end
										salida_excel.DTLLE_VALOR_SALARIO);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_1
										.addCell(cell_18_tFileOutputExcel_1);
								int currentWith_18_tFileOutputExcel_1 = String
										.valueOf(
												((jxl.write.Number) cell_18_tFileOutputExcel_1)
														.getValue()).trim()
										.length();
								currentWith_18_tFileOutputExcel_1 = currentWith_18_tFileOutputExcel_1 > 10 ? 10
										: currentWith_18_tFileOutputExcel_1;
								fitWidth_tFileOutputExcel_1[18] = fitWidth_tFileOutputExcel_1[18] > currentWith_18_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[18]
										: currentWith_18_tFileOutputExcel_1 + 2;
							}

							nb_line_tFileOutputExcel_1++;

							tos_count_tFileOutputExcel_1++;

							/**
							 * [tFileOutputExcel_1 main ] stop
							 */

						} // End of branch "salida_excel"

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

					if (conn_tPostgresqlInput_1 != null
							&& !conn_tPostgresqlInput_1.isClosed()) {

						conn_tPostgresqlInput_1.commit();

						conn_tPostgresqlInput_1.close();

					}

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				writeableWorkbook_tFileOutputExcel_1.write();
				writeableWorkbook_tFileOutputExcel_1.close();

				nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("salida_excel"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_proveedor;

		public int getId_proveedor() {
			return this.id_proveedor;
		}

		public String num_documento;

		public String getNum_documento() {
			return this.num_documento;
		}

		public String num_cuenta_bancaria;

		public String getNum_cuenta_bancaria() {
			return this.num_cuenta_bancaria;
		}

		public String tipo_cuenta_bancaria;

		public String getTipo_cuenta_bancaria() {
			return this.tipo_cuenta_bancaria;
		}

		public int id_entidad_bancaria;

		public int getId_entidad_bancaria() {
			return this.id_entidad_bancaria;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_proveedor;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id_proveedor != other.id_proveedor)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id_proveedor = this.id_proveedor;
			other.num_documento = this.num_documento;
			other.num_cuenta_bancaria = this.num_cuenta_bancaria;
			other.tipo_cuenta_bancaria = this.tipo_cuenta_bancaria;
			other.id_entidad_bancaria = this.id_entidad_bancaria;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id_proveedor = this.id_proveedor;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					this.id_proveedor = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_proveedor);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.num_documento = readString(dis, ois);

				this.num_cuenta_bancaria = readString(dis, ois);

				this.tipo_cuenta_bancaria = readString(dis, ois);

				this.id_entidad_bancaria = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.num_documento, dos, oos);

				writeString(this.num_cuenta_bancaria, dos, oos);

				writeString(this.tipo_cuenta_bancaria, dos, oos);

				dos.writeInt(this.id_entidad_bancaria);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_proveedor=" + String.valueOf(id_proveedor));
			sb.append(",num_documento=" + num_documento);
			sb.append(",num_cuenta_bancaria=" + num_cuenta_bancaria);
			sb.append(",tipo_cuenta_bancaria=" + tipo_cuenta_bancaria);
			sb.append(",id_entidad_bancaria="
					+ String.valueOf(id_entidad_bancaria));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_proveedor,
					other.id_proveedor);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6)
				// outputs:(salida_excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_2);
				String dbUser_tPostgresqlInput_2 = "cagortitan";

				final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("b4ee27b68e29683087f7bc21d51451fdf960e7387307b8cc");

				String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;

				String url_tPostgresqlInput_2 = "jdbc:postgresql://"
						+ "postgresproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "5432" + "/" + "udistrital";

				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_2, dbUser_tPostgresqlInput_2,
						dbPwd_tPostgresqlInput_2);

				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT id_proveedor, num_documento, num_cuenta_bancaria, \ntipo_cuenta_bancaria, id_entidad_bancaria  FROM agora.informacion_proveedor;";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row2.id_proveedor = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								row2.id_proveedor = rs_tPostgresqlInput_2
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row2.num_documento = null;
						} else {

							row2.num_documento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 3) {
							row2.num_cuenta_bancaria = null;
						} else {

							row2.num_cuenta_bancaria = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 4) {
							row2.tipo_cuenta_bancaria = null;
						} else {

							row2.tipo_cuenta_bancaria = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 4, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 5) {
							row2.id_entidad_bancaria = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(5) != null) {
								row2.id_entidad_bancaria = rs_tPostgresqlInput_2
										.getInt(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id_proveedor = row2.id_proveedor;

						row2_HashRow.num_documento = row2.num_documento;

						row2_HashRow.num_cuenta_bancaria = row2.num_cuenta_bancaria;

						row2_HashRow.tipo_cuenta_bancaria = row2.tipo_cuenta_bancaria;

						row2_HashRow.id_entidad_bancaria = row2.id_entidad_bancaria;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

					if (conn_tPostgresqlInput_2 != null
							&& !conn_tPostgresqlInput_2.isClosed()) {

						conn_tPostgresqlInput_2.commit();

						conn_tPostgresqlInput_2.close();

					}

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public String numero_contrato_suscrito;

		public String getNumero_contrato_suscrito() {
			return this.numero_contrato_suscrito;
		}

		public Integer vigencia;

		public Integer getVigencia() {
			return this.vigencia;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.numero_contrato_suscrito == null) ? 0
								: this.numero_contrato_suscrito.hashCode());

				result = prime
						* result
						+ ((this.vigencia == null) ? 0 : this.vigencia
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.numero_contrato_suscrito == null) {
				if (other.numero_contrato_suscrito != null)
					return false;

			} else if (!this.numero_contrato_suscrito
					.equals(other.numero_contrato_suscrito))

				return false;

			if (this.vigencia == null) {
				if (other.vigencia != null)
					return false;

			} else if (!this.vigencia.equals(other.vigencia))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.numero_contrato = this.numero_contrato;
			other.numero_contrato_suscrito = this.numero_contrato_suscrito;
			other.vigencia = this.vigencia;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.numero_contrato_suscrito = this.numero_contrato_suscrito;
			other.vigencia = this.vigencia;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length == 0) {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					this.numero_contrato_suscrito = readString(dis);

					this.vigencia = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numero_contrato_suscrito, dos);

				// Integer

				writeInteger(this.vigencia, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.numero_contrato = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.numero_contrato, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numero_contrato=" + numero_contrato);
			sb.append(",numero_contrato_suscrito=" + numero_contrato_suscrito);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.numero_contrato_suscrito,
					other.numero_contrato_suscrito);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vigencia, other.vigencia);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6)
				// outputs:(salida_excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_3);
				String dbUser_tPostgresqlInput_3 = "cargotitan";

				final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("d886ab4875a92aa587f7bc21d51451fdf960e7387307b8cc");

				String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;

				String url_tPostgresqlInput_3 = "jdbc:postgresql://"
						+ "postgresproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "5432" + "/" + "udistrital";

				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_3, dbUser_tPostgresqlInput_3,
						dbPwd_tPostgresqlInput_3);

				conn_tPostgresqlInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT numero_contrato, numero_contrato_suscrito, vigencia FROM argo.contrato_suscrito;";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);

				java.sql.ResultSet rs_tPostgresqlInput_3 = null;
				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row3.numero_contrato = null;
						} else {

							row3.numero_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_3, 1, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row3.numero_contrato_suscrito = null;
						} else {

							row3.numero_contrato_suscrito = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_3, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row3.vigencia = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(3) != null) {
								row3.vigencia = rs_tPostgresqlInput_3.getInt(3);
							} else {
								row3.vigencia = null;
							}
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.numero_contrato = row3.numero_contrato;

						row3_HashRow.numero_contrato_suscrito = row3.numero_contrato_suscrito;

						row3_HashRow.vigencia = row3.vigencia;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					stmt_tPostgresqlInput_3.close();

					if (conn_tPostgresqlInput_3 != null
							&& !conn_tPostgresqlInput_3.isClosed()) {

						conn_tPostgresqlInput_3.commit();

						conn_tPostgresqlInput_3.close();

					}

				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer numero_cdp;

		public Integer getNumero_cdp() {
			return this.numero_cdp;
		}

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public Integer vigencia;

		public Integer getVigencia() {
			return this.vigencia;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.numero_contrato == null) ? 0
								: this.numero_contrato.hashCode());

				result = prime
						* result
						+ ((this.vigencia == null) ? 0 : this.vigencia
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.numero_contrato == null) {
				if (other.numero_contrato != null)
					return false;

			} else if (!this.numero_contrato.equals(other.numero_contrato))

				return false;

			if (this.vigencia == null) {
				if (other.vigencia != null)
					return false;

			} else if (!this.vigencia.equals(other.vigencia))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.numero_cdp = this.numero_cdp;
			other.numero_contrato = this.numero_contrato;
			other.vigencia = this.vigencia;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.numero_contrato = this.numero_contrato;
			other.vigencia = this.vigencia;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length == 0) {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					this.numero_contrato = readString(dis);

					this.vigencia = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numero_contrato, dos);

				// Integer

				writeInteger(this.vigencia, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.numero_cdp = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.numero_cdp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numero_cdp=" + String.valueOf(numero_cdp));
			sb.append(",numero_contrato=" + numero_contrato);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.numero_contrato,
					other.numero_contrato);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vigencia, other.vigencia);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tPostgresqlInput_4 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6)
				// outputs:(salida_excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_4);
				String dbUser_tPostgresqlInput_4 = "cargotitan";

				final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("d886ab4875a92aa587f7bc21d51451fdf960e7387307b8cc");

				String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;

				String url_tPostgresqlInput_4 = "jdbc:postgresql://"
						+ "postgresproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "5432" + "/" + "udistrital";

				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_4, dbUser_tPostgresqlInput_4,
						dbPwd_tPostgresqlInput_4);

				conn_tPostgresqlInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "select numero_cdp, numero_contrato, vigencia from argo.contrato_disponibilidad";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);

				java.sql.ResultSet rs_tPostgresqlInput_4 = null;
				try {
					rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
							.executeQuery(dbquery_tPostgresqlInput_4);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
							.getColumnCount();

					String tmpContent_tPostgresqlInput_4 = null;

					while (rs_tPostgresqlInput_4.next()) {
						nb_line_tPostgresqlInput_4++;

						if (colQtyInRs_tPostgresqlInput_4 < 1) {
							row4.numero_cdp = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(1) != null) {
								row4.numero_cdp = rs_tPostgresqlInput_4
										.getInt(1);
							} else {
								row4.numero_cdp = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 2) {
							row4.numero_contrato = null;
						} else {

							row4.numero_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 3) {
							row4.vigencia = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(3) != null) {
								row4.vigencia = rs_tPostgresqlInput_4.getInt(3);
							} else {
								row4.vigencia = null;
							}
						}

						/**
						 * [tPostgresqlInput_4 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_4 main ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						tos_count_tPostgresqlInput_4++;

						/**
						 * [tPostgresqlInput_4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.numero_cdp = row4.numero_cdp;

						row4_HashRow.numero_contrato = row4.numero_contrato;

						row4_HashRow.vigencia = row4.vigencia;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tPostgresqlInput_4 end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

					}
				} finally {
					stmt_tPostgresqlInput_4.close();

					if (conn_tPostgresqlInput_4 != null
							&& !conn_tPostgresqlInput_4.isClosed()) {

						conn_tPostgresqlInput_4.commit();

						conn_tPostgresqlInput_4.close();

					}

				}
				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_4 finally ] start
				 */

				currentComponent = "tPostgresqlInput_4";

				/**
				 * [tPostgresqlInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer supervisor;

		public Integer getSupervisor() {
			return this.supervisor;
		}

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public int vigencia;

		public int getVigencia() {
			return this.vigencia;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.numero_contrato == null) ? 0
								: this.numero_contrato.hashCode());

				result = prime * result + (int) this.vigencia;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.numero_contrato == null) {
				if (other.numero_contrato != null)
					return false;

			} else if (!this.numero_contrato.equals(other.numero_contrato))

				return false;

			if (this.vigencia != other.vigencia)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.supervisor = this.supervisor;
			other.numero_contrato = this.numero_contrato;
			other.vigencia = this.vigencia;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.numero_contrato = this.numero_contrato;
			other.vigencia = this.vigencia;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS.length == 0) {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					this.numero_contrato = readString(dis);

					this.vigencia = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numero_contrato, dos);

				// int

				dos.writeInt(this.vigencia);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.supervisor = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.supervisor, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("supervisor=" + String.valueOf(supervisor));
			sb.append(",numero_contrato=" + numero_contrato);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.numero_contrato,
					other.numero_contrato);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vigencia, other.vigencia);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tPostgresqlInput_5 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6)
				// outputs:(salida_excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_5", false);
				start_Hash
						.put("tPostgresqlInput_5", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_5";

				int tos_count_tPostgresqlInput_5 = 0;

				int nb_line_tPostgresqlInput_5 = 0;
				java.sql.Connection conn_tPostgresqlInput_5 = null;
				String driverClass_tPostgresqlInput_5 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_5);
				String dbUser_tPostgresqlInput_5 = "cargotitan";

				final String decryptedPassword_tPostgresqlInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("d886ab4875a92aa587f7bc21d51451fdf960e7387307b8cc");

				String dbPwd_tPostgresqlInput_5 = decryptedPassword_tPostgresqlInput_5;

				String url_tPostgresqlInput_5 = "jdbc:postgresql://"
						+ "postgresproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "5432" + "/" + "udistrital";

				conn_tPostgresqlInput_5 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_5, dbUser_tPostgresqlInput_5,
						dbPwd_tPostgresqlInput_5);

				conn_tPostgresqlInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5
						.createStatement();

				String dbquery_tPostgresqlInput_5 = "select supervisor, numero_contrato, vigencia from argo.contrato_general;";

				globalMap.put("tPostgresqlInput_5_QUERY",
						dbquery_tPostgresqlInput_5);

				java.sql.ResultSet rs_tPostgresqlInput_5 = null;
				try {
					rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5
							.executeQuery(dbquery_tPostgresqlInput_5);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5
							.getColumnCount();

					String tmpContent_tPostgresqlInput_5 = null;

					while (rs_tPostgresqlInput_5.next()) {
						nb_line_tPostgresqlInput_5++;

						if (colQtyInRs_tPostgresqlInput_5 < 1) {
							row5.supervisor = null;
						} else {

							if (rs_tPostgresqlInput_5.getObject(1) != null) {
								row5.supervisor = rs_tPostgresqlInput_5
										.getInt(1);
							} else {
								row5.supervisor = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 2) {
							row5.numero_contrato = null;
						} else {

							row5.numero_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_5, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_5 < 3) {
							row5.vigencia = 0;
						} else {

							if (rs_tPostgresqlInput_5.getObject(3) != null) {
								row5.vigencia = rs_tPostgresqlInput_5.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_5 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_5 main ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						tos_count_tPostgresqlInput_5++;

						/**
						 * [tPostgresqlInput_5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.supervisor = row5.supervisor;

						row5_HashRow.numero_contrato = row5.numero_contrato;

						row5_HashRow.vigencia = row5.vigencia;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tPostgresqlInput_5 end ] start
						 */

						currentComponent = "tPostgresqlInput_5";

					}
				} finally {
					stmt_tPostgresqlInput_5.close();

					if (conn_tPostgresqlInput_5 != null
							&& !conn_tPostgresqlInput_5.isClosed()) {

						conn_tPostgresqlInput_5.commit();

						conn_tPostgresqlInput_5.close();

					}

				}
				globalMap.put("tPostgresqlInput_5_NB_LINE",
						nb_line_tPostgresqlInput_5);

				ok_Hash.put("tPostgresqlInput_5", true);
				end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_5 finally ] start
				 */

				currentComponent = "tPostgresqlInput_5";

				/**
				 * [tPostgresqlInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String dependencia_supervisor;

		public String getDependencia_supervisor() {
			return this.dependencia_supervisor;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id = this.id;
			other.dependencia_supervisor = this.dependencia_supervisor;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Migracion_Titan_OPs_Contratistas_DESCUENTOS) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.dependencia_supervisor = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.dependencia_supervisor, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",dependencia_supervisor=" + dependencia_supervisor);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tPostgresqlInput_6 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6)
				// outputs:(salida_excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_6", false);
				start_Hash
						.put("tPostgresqlInput_6", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_6";

				int tos_count_tPostgresqlInput_6 = 0;

				int nb_line_tPostgresqlInput_6 = 0;
				java.sql.Connection conn_tPostgresqlInput_6 = null;
				String driverClass_tPostgresqlInput_6 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_6);
				String dbUser_tPostgresqlInput_6 = "cargotitan";

				final String decryptedPassword_tPostgresqlInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("d886ab4875a92aa587f7bc21d51451fdf960e7387307b8cc");

				String dbPwd_tPostgresqlInput_6 = decryptedPassword_tPostgresqlInput_6;

				String url_tPostgresqlInput_6 = "jdbc:postgresql://"
						+ "postgresproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "5432" + "/" + "udistrital";

				conn_tPostgresqlInput_6 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_6, dbUser_tPostgresqlInput_6,
						dbPwd_tPostgresqlInput_6);

				conn_tPostgresqlInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6
						.createStatement();

				String dbquery_tPostgresqlInput_6 = "select id, dependencia_supervisor from argo.supervisor_contrato;";

				globalMap.put("tPostgresqlInput_6_QUERY",
						dbquery_tPostgresqlInput_6);

				java.sql.ResultSet rs_tPostgresqlInput_6 = null;
				try {
					rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6
							.executeQuery(dbquery_tPostgresqlInput_6);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6
							.getColumnCount();

					String tmpContent_tPostgresqlInput_6 = null;

					while (rs_tPostgresqlInput_6.next()) {
						nb_line_tPostgresqlInput_6++;

						if (colQtyInRs_tPostgresqlInput_6 < 1) {
							row6.id = 0;
						} else {

							if (rs_tPostgresqlInput_6.getObject(1) != null) {
								row6.id = rs_tPostgresqlInput_6.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 2) {
							row6.dependencia_supervisor = null;
						} else {

							row6.dependencia_supervisor = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_6, 2, false);
						}

						/**
						 * [tPostgresqlInput_6 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_6 main ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						tos_count_tPostgresqlInput_6++;

						/**
						 * [tPostgresqlInput_6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.id = row6.id;

						row6_HashRow.dependencia_supervisor = row6.dependencia_supervisor;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tPostgresqlInput_6 end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

					}
				} finally {
					stmt_tPostgresqlInput_6.close();

					if (conn_tPostgresqlInput_6 != null
							&& !conn_tPostgresqlInput_6.isClosed()) {

						conn_tPostgresqlInput_6.commit();

						conn_tPostgresqlInput_6.close();

					}

				}
				globalMap.put("tPostgresqlInput_6_NB_LINE",
						nb_line_tPostgresqlInput_6);

				ok_Hash.put("tPostgresqlInput_6", true);
				end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_6 finally ] start
				 */

				currentComponent = "tPostgresqlInput_6";

				/**
				 * [tPostgresqlInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlInput_7 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_7", false);
				start_Hash
						.put("tPostgresqlInput_7", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_7";

				int tos_count_tPostgresqlInput_7 = 0;

				int nb_line_tPostgresqlInput_7 = 0;
				java.sql.Connection conn_tPostgresqlInput_7 = null;
				String driverClass_tPostgresqlInput_7 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_7);
				String dbUser_tPostgresqlInput_7 = "cadmititan";

				final String decryptedPassword_tPostgresqlInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("d7c979824dbbd45f87f7bc21d51451fdf960e7387307b8cc");

				String dbPwd_tPostgresqlInput_7 = decryptedPassword_tPostgresqlInput_7;

				String url_tPostgresqlInput_7 = "jdbc:postgresql://"
						+ "pgprod.udistritaloas.edu.co" + ":" + "5432" + "/"
						+ "udistrital_core_db";

				conn_tPostgresqlInput_7 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_7, dbUser_tPostgresqlInput_7,
						dbPwd_tPostgresqlInput_7);

				conn_tPostgresqlInput_7.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7
						.createStatement();

				String dbquery_tPostgresqlInput_7 = "SELECT dp.persona,dp.concepto, cn.nombre_concepto, dp.valor_calculado, dp.numero_contrato, dp.vigencia_contrato,p.mes,\n  p.ano \n FROM administrativa.detalle_preliquidacion dp, administrativa.preliquidacion p,\n  administrativa.concepto_nomina cn where p.id = dp.preliquidacion and p.mes=3 and p.ano=2019 and \n dp.concepto NOT IN (10,36,311) and cn.id = dp.concepto order by dp.persona;";

				globalMap.put("tPostgresqlInput_7_QUERY",
						dbquery_tPostgresqlInput_7);

				java.sql.ResultSet rs_tPostgresqlInput_7 = null;
				try {
					rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7
							.executeQuery(dbquery_tPostgresqlInput_7);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7
							.getColumnCount();

					String tmpContent_tPostgresqlInput_7 = null;

					while (rs_tPostgresqlInput_7.next()) {
						nb_line_tPostgresqlInput_7++;

						/**
						 * [tPostgresqlInput_7 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_7 main ] start
						 */

						currentComponent = "tPostgresqlInput_7";

						tos_count_tPostgresqlInput_7++;

						/**
						 * [tPostgresqlInput_7 main ] stop
						 */

						/**
						 * [tPostgresqlInput_7 end ] start
						 */

						currentComponent = "tPostgresqlInput_7";

					}
				} finally {
					stmt_tPostgresqlInput_7.close();

					if (conn_tPostgresqlInput_7 != null
							&& !conn_tPostgresqlInput_7.isClosed()) {

						conn_tPostgresqlInput_7.commit();

						conn_tPostgresqlInput_7.close();

					}

				}
				globalMap.put("tPostgresqlInput_7_NB_LINE",
						nb_line_tPostgresqlInput_7);

				ok_Hash.put("tPostgresqlInput_7", true);
				end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_7 finally ] start
				 */

				currentComponent = "tPostgresqlInput_7";

				/**
				 * [tPostgresqlInput_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Migracion_Titan_OPs_Contratistas_DESCUENTOS Migracion_Titan_OPs_Contratistas_DESCUENTOSClass = new Migracion_Titan_OPs_Contratistas_DESCUENTOS();

		int exitCode = Migracion_Titan_OPs_Contratistas_DESCUENTOSClass
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Migracion_Titan_OPs_Contratistas_DESCUENTOS.class
					.getClassLoader().getResourceAsStream(
							"local_project/migracion_titan_ops_contratistas_descuentos_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.ano = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ano"));
			} catch (NumberFormatException e) {
				context.ano = null;
			}
			try {
				context.mes = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("mes"));
			} catch (NumberFormatException e) {
				context.mes = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ano")) {
				context.ano = (Integer) parentContextMap.get("ano");
			}
			if (parentContextMap.containsKey("mes")) {
				context.mes = (Integer) parentContextMap.get("mes");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlInput_1) {
			globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", -1);

			e_tPostgresqlInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tPostgresqlInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlInput_7) {
			globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", -1);

			e_tPostgresqlInput_7.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Migracion_Titan_OPs_Contratistas_DESCUENTOS");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 178452 characters generated by Talend Open Studio for Data Integration on the
 * 6 de mayo de 2019 08:58:00 PM GMT
 ************************************************************************************************/
