// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.volcado_apropiacion_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: volcado_apropiacion Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class volcado_apropiacion implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "volcado_apropiacion";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					volcado_apropiacion.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(volcado_apropiacion.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class salida_postgresStruct implements
			routines.system.IPersistableRow<salida_postgresStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[0];

		public BigDecimal VIGENCIA;

		public BigDecimal getVIGENCIA() {
			return this.VIGENCIA;
		}

		public String CODIGO_UNIDAD_EJECUTORA;

		public String getCODIGO_UNIDAD_EJECUTORA() {
			return this.CODIGO_UNIDAD_EJECUTORA;
		}

		public BigDecimal VALOR_REZAGO;

		public BigDecimal getVALOR_REZAGO() {
			return this.VALOR_REZAGO;
		}

		public BigDecimal VALOR;

		public BigDecimal getVALOR() {
			return this.VALOR;
		}

		public String TIPO_DOCUMENTO;

		public String getTIPO_DOCUMENTO() {
			return this.TIPO_DOCUMENTO;
		}

		public String DOCUMENTOS_NUMERO;

		public String getDOCUMENTOS_NUMERO() {
			return this.DOCUMENTOS_NUMERO;
		}

		public java.util.Date DOCUMENTOS_FECHA;

		public java.util.Date getDOCUMENTOS_FECHA() {
			return this.DOCUMENTOS_FECHA;
		}

		public BigDecimal id;

		public BigDecimal getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length == 0) {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion) {

				try {

					int length = 0;

					this.VIGENCIA = (BigDecimal) dis.readObject();

					this.CODIGO_UNIDAD_EJECUTORA = readString(dis);

					this.VALOR_REZAGO = (BigDecimal) dis.readObject();

					this.VALOR = (BigDecimal) dis.readObject();

					this.TIPO_DOCUMENTO = readString(dis);

					this.DOCUMENTOS_NUMERO = readString(dis);

					this.DOCUMENTOS_FECHA = readDate(dis);

					this.id = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.VIGENCIA);

				// String

				writeString(this.CODIGO_UNIDAD_EJECUTORA, dos);

				// BigDecimal

				dos.writeObject(this.VALOR_REZAGO);

				// BigDecimal

				dos.writeObject(this.VALOR);

				// String

				writeString(this.TIPO_DOCUMENTO, dos);

				// String

				writeString(this.DOCUMENTOS_NUMERO, dos);

				// java.util.Date

				writeDate(this.DOCUMENTOS_FECHA, dos);

				// BigDecimal

				dos.writeObject(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VIGENCIA=" + String.valueOf(VIGENCIA));
			sb.append(",CODIGO_UNIDAD_EJECUTORA=" + CODIGO_UNIDAD_EJECUTORA);
			sb.append(",VALOR_REZAGO=" + String.valueOf(VALOR_REZAGO));
			sb.append(",VALOR=" + String.valueOf(VALOR));
			sb.append(",TIPO_DOCUMENTO=" + TIPO_DOCUMENTO);
			sb.append(",DOCUMENTOS_NUMERO=" + DOCUMENTOS_NUMERO);
			sb.append(",DOCUMENTOS_FECHA=" + String.valueOf(DOCUMENTOS_FECHA));
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salida_postgresStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[0];

		public BigDecimal VIGENCIA;

		public BigDecimal getVIGENCIA() {
			return this.VIGENCIA;
		}

		public String CODIGO_UNIDAD_EJECUTORA;

		public String getCODIGO_UNIDAD_EJECUTORA() {
			return this.CODIGO_UNIDAD_EJECUTORA;
		}

		public BigDecimal VALOR_REZAGO;

		public BigDecimal getVALOR_REZAGO() {
			return this.VALOR_REZAGO;
		}

		public BigDecimal VALOR;

		public BigDecimal getVALOR() {
			return this.VALOR;
		}

		public String TIPO_DOCUMENTO;

		public String getTIPO_DOCUMENTO() {
			return this.TIPO_DOCUMENTO;
		}

		public String DOCUMENTOS_NUMERO;

		public String getDOCUMENTOS_NUMERO() {
			return this.DOCUMENTOS_NUMERO;
		}

		public java.util.Date DOCUMENTOS_FECHA;

		public java.util.Date getDOCUMENTOS_FECHA() {
			return this.DOCUMENTOS_FECHA;
		}

		public BigDecimal id;

		public BigDecimal getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length == 0) {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion) {

				try {

					int length = 0;

					this.VIGENCIA = (BigDecimal) dis.readObject();

					this.CODIGO_UNIDAD_EJECUTORA = readString(dis);

					this.VALOR_REZAGO = (BigDecimal) dis.readObject();

					this.VALOR = (BigDecimal) dis.readObject();

					this.TIPO_DOCUMENTO = readString(dis);

					this.DOCUMENTOS_NUMERO = readString(dis);

					this.DOCUMENTOS_FECHA = readDate(dis);

					this.id = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.VIGENCIA);

				// String

				writeString(this.CODIGO_UNIDAD_EJECUTORA, dos);

				// BigDecimal

				dos.writeObject(this.VALOR_REZAGO);

				// BigDecimal

				dos.writeObject(this.VALOR);

				// String

				writeString(this.TIPO_DOCUMENTO, dos);

				// String

				writeString(this.DOCUMENTOS_NUMERO, dos);

				// java.util.Date

				writeDate(this.DOCUMENTOS_FECHA, dos);

				// BigDecimal

				dos.writeObject(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VIGENCIA=" + String.valueOf(VIGENCIA));
			sb.append(",CODIGO_UNIDAD_EJECUTORA=" + CODIGO_UNIDAD_EJECUTORA);
			sb.append(",VALOR_REZAGO=" + String.valueOf(VALOR_REZAGO));
			sb.append(",VALOR=" + String.valueOf(VALOR));
			sb.append(",TIPO_DOCUMENTO=" + TIPO_DOCUMENTO);
			sb.append(",DOCUMENTOS_NUMERO=" + DOCUMENTOS_NUMERO);
			sb.append(",DOCUMENTOS_FECHA=" + String.valueOf(DOCUMENTOS_FECHA));
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[0];

		public BigDecimal VIGENCIA;

		public BigDecimal getVIGENCIA() {
			return this.VIGENCIA;
		}

		public BigDecimal RUBRO_INTERNO;

		public BigDecimal getRUBRO_INTERNO() {
			return this.RUBRO_INTERNO;
		}

		public String CODIGO_COMPANIA;

		public String getCODIGO_COMPANIA() {
			return this.CODIGO_COMPANIA;
		}

		public String CODIGO_UNIDAD_EJECUTORA;

		public String getCODIGO_UNIDAD_EJECUTORA() {
			return this.CODIGO_UNIDAD_EJECUTORA;
		}

		public BigDecimal VALOR_REZAGO;

		public BigDecimal getVALOR_REZAGO() {
			return this.VALOR_REZAGO;
		}

		public BigDecimal VALOR_MODIFICACIONES;

		public BigDecimal getVALOR_MODIFICACIONES() {
			return this.VALOR_MODIFICACIONES;
		}

		public BigDecimal VALOR;

		public BigDecimal getVALOR() {
			return this.VALOR;
		}

		public String TIPO_DOCUMENTO;

		public String getTIPO_DOCUMENTO() {
			return this.TIPO_DOCUMENTO;
		}

		public String DOCUMENTOS_NUMERO;

		public String getDOCUMENTOS_NUMERO() {
			return this.DOCUMENTOS_NUMERO;
		}

		public java.util.Date DOCUMENTOS_FECHA;

		public java.util.Date getDOCUMENTOS_FECHA() {
			return this.DOCUMENTOS_FECHA;
		}

		public BigDecimal ID_LIMAY_PL;

		public BigDecimal getID_LIMAY_PL() {
			return this.ID_LIMAY_PL;
		}

		public BigDecimal ID_LIMAY;

		public BigDecimal getID_LIMAY() {
			return this.ID_LIMAY;
		}

		public BigDecimal ID_LIMAY_VF;

		public BigDecimal getID_LIMAY_VF() {
			return this.ID_LIMAY_VF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length == 0) {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion) {

				try {

					int length = 0;

					this.VIGENCIA = (BigDecimal) dis.readObject();

					this.RUBRO_INTERNO = (BigDecimal) dis.readObject();

					this.CODIGO_COMPANIA = readString(dis);

					this.CODIGO_UNIDAD_EJECUTORA = readString(dis);

					this.VALOR_REZAGO = (BigDecimal) dis.readObject();

					this.VALOR_MODIFICACIONES = (BigDecimal) dis.readObject();

					this.VALOR = (BigDecimal) dis.readObject();

					this.TIPO_DOCUMENTO = readString(dis);

					this.DOCUMENTOS_NUMERO = readString(dis);

					this.DOCUMENTOS_FECHA = readDate(dis);

					this.ID_LIMAY_PL = (BigDecimal) dis.readObject();

					this.ID_LIMAY = (BigDecimal) dis.readObject();

					this.ID_LIMAY_VF = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.VIGENCIA);

				// BigDecimal

				dos.writeObject(this.RUBRO_INTERNO);

				// String

				writeString(this.CODIGO_COMPANIA, dos);

				// String

				writeString(this.CODIGO_UNIDAD_EJECUTORA, dos);

				// BigDecimal

				dos.writeObject(this.VALOR_REZAGO);

				// BigDecimal

				dos.writeObject(this.VALOR_MODIFICACIONES);

				// BigDecimal

				dos.writeObject(this.VALOR);

				// String

				writeString(this.TIPO_DOCUMENTO, dos);

				// String

				writeString(this.DOCUMENTOS_NUMERO, dos);

				// java.util.Date

				writeDate(this.DOCUMENTOS_FECHA, dos);

				// BigDecimal

				dos.writeObject(this.ID_LIMAY_PL);

				// BigDecimal

				dos.writeObject(this.ID_LIMAY);

				// BigDecimal

				dos.writeObject(this.ID_LIMAY_VF);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VIGENCIA=" + String.valueOf(VIGENCIA));
			sb.append(",RUBRO_INTERNO=" + String.valueOf(RUBRO_INTERNO));
			sb.append(",CODIGO_COMPANIA=" + CODIGO_COMPANIA);
			sb.append(",CODIGO_UNIDAD_EJECUTORA=" + CODIGO_UNIDAD_EJECUTORA);
			sb.append(",VALOR_REZAGO=" + String.valueOf(VALOR_REZAGO));
			sb.append(",VALOR_MODIFICACIONES="
					+ String.valueOf(VALOR_MODIFICACIONES));
			sb.append(",VALOR=" + String.valueOf(VALOR));
			sb.append(",TIPO_DOCUMENTO=" + TIPO_DOCUMENTO);
			sb.append(",DOCUMENTOS_NUMERO=" + DOCUMENTOS_NUMERO);
			sb.append(",DOCUMENTOS_FECHA=" + String.valueOf(DOCUMENTOS_FECHA));
			sb.append(",ID_LIMAY_PL=" + String.valueOf(ID_LIMAY_PL));
			sb.append(",ID_LIMAY=" + String.valueOf(ID_LIMAY));
			sb.append(",ID_LIMAY_VF=" + String.valueOf(ID_LIMAY_VF));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_2Struct implements
			routines.system.IPersistableRow<after_tOracleInput_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[0];

		public BigDecimal VIGENCIA;

		public BigDecimal getVIGENCIA() {
			return this.VIGENCIA;
		}

		public BigDecimal RUBRO_INTERNO;

		public BigDecimal getRUBRO_INTERNO() {
			return this.RUBRO_INTERNO;
		}

		public String CODIGO_COMPANIA;

		public String getCODIGO_COMPANIA() {
			return this.CODIGO_COMPANIA;
		}

		public String CODIGO_UNIDAD_EJECUTORA;

		public String getCODIGO_UNIDAD_EJECUTORA() {
			return this.CODIGO_UNIDAD_EJECUTORA;
		}

		public BigDecimal VALOR_REZAGO;

		public BigDecimal getVALOR_REZAGO() {
			return this.VALOR_REZAGO;
		}

		public BigDecimal VALOR_MODIFICACIONES;

		public BigDecimal getVALOR_MODIFICACIONES() {
			return this.VALOR_MODIFICACIONES;
		}

		public BigDecimal VALOR;

		public BigDecimal getVALOR() {
			return this.VALOR;
		}

		public String TIPO_DOCUMENTO;

		public String getTIPO_DOCUMENTO() {
			return this.TIPO_DOCUMENTO;
		}

		public String DOCUMENTOS_NUMERO;

		public String getDOCUMENTOS_NUMERO() {
			return this.DOCUMENTOS_NUMERO;
		}

		public java.util.Date DOCUMENTOS_FECHA;

		public java.util.Date getDOCUMENTOS_FECHA() {
			return this.DOCUMENTOS_FECHA;
		}

		public BigDecimal ID_LIMAY_PL;

		public BigDecimal getID_LIMAY_PL() {
			return this.ID_LIMAY_PL;
		}

		public BigDecimal ID_LIMAY;

		public BigDecimal getID_LIMAY() {
			return this.ID_LIMAY;
		}

		public BigDecimal ID_LIMAY_VF;

		public BigDecimal getID_LIMAY_VF() {
			return this.ID_LIMAY_VF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_volcado_apropiacion.length == 0) {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_volcado_apropiacion, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion) {

				try {

					int length = 0;

					this.VIGENCIA = (BigDecimal) dis.readObject();

					this.RUBRO_INTERNO = (BigDecimal) dis.readObject();

					this.CODIGO_COMPANIA = readString(dis);

					this.CODIGO_UNIDAD_EJECUTORA = readString(dis);

					this.VALOR_REZAGO = (BigDecimal) dis.readObject();

					this.VALOR_MODIFICACIONES = (BigDecimal) dis.readObject();

					this.VALOR = (BigDecimal) dis.readObject();

					this.TIPO_DOCUMENTO = readString(dis);

					this.DOCUMENTOS_NUMERO = readString(dis);

					this.DOCUMENTOS_FECHA = readDate(dis);

					this.ID_LIMAY_PL = (BigDecimal) dis.readObject();

					this.ID_LIMAY = (BigDecimal) dis.readObject();

					this.ID_LIMAY_VF = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.VIGENCIA);

				// BigDecimal

				dos.writeObject(this.RUBRO_INTERNO);

				// String

				writeString(this.CODIGO_COMPANIA, dos);

				// String

				writeString(this.CODIGO_UNIDAD_EJECUTORA, dos);

				// BigDecimal

				dos.writeObject(this.VALOR_REZAGO);

				// BigDecimal

				dos.writeObject(this.VALOR_MODIFICACIONES);

				// BigDecimal

				dos.writeObject(this.VALOR);

				// String

				writeString(this.TIPO_DOCUMENTO, dos);

				// String

				writeString(this.DOCUMENTOS_NUMERO, dos);

				// java.util.Date

				writeDate(this.DOCUMENTOS_FECHA, dos);

				// BigDecimal

				dos.writeObject(this.ID_LIMAY_PL);

				// BigDecimal

				dos.writeObject(this.ID_LIMAY);

				// BigDecimal

				dos.writeObject(this.ID_LIMAY_VF);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VIGENCIA=" + String.valueOf(VIGENCIA));
			sb.append(",RUBRO_INTERNO=" + String.valueOf(RUBRO_INTERNO));
			sb.append(",CODIGO_COMPANIA=" + CODIGO_COMPANIA);
			sb.append(",CODIGO_UNIDAD_EJECUTORA=" + CODIGO_UNIDAD_EJECUTORA);
			sb.append(",VALOR_REZAGO=" + String.valueOf(VALOR_REZAGO));
			sb.append(",VALOR_MODIFICACIONES="
					+ String.valueOf(VALOR_MODIFICACIONES));
			sb.append(",VALOR=" + String.valueOf(VALOR));
			sb.append(",TIPO_DOCUMENTO=" + TIPO_DOCUMENTO);
			sb.append(",DOCUMENTOS_NUMERO=" + DOCUMENTOS_NUMERO);
			sb.append(",DOCUMENTOS_FECHA=" + String.valueOf(DOCUMENTOS_FECHA));
			sb.append(",ID_LIMAY_PL=" + String.valueOf(ID_LIMAY_PL));
			sb.append(",ID_LIMAY=" + String.valueOf(ID_LIMAY));
			sb.append(",ID_LIMAY_VF=" + String.valueOf(ID_LIMAY_VF));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tOracleInput_1Process(globalMap);

				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				salida_postgresStruct salida_postgres = new salida_postgresStruct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("salida_postgres"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				salida_postgresStruct salida_postgres_tmp = new salida_postgresStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row1Struct, row1Struct> tHash_tJoin_1 = (java.util.Map<row1Struct, row1Struct>) globalMap
						.get("tHash_row1");

				class Util_tJoin_1 {
					row1Struct lookupValue = null;
					row1Struct row1HashKey = new row1Struct();

					public boolean isJoined(row2Struct mainRow) {
						row1HashKey.vigencia = mainRow.VIGENCIA;

						row1HashKey.INTERNO_RUBRO = mainRow.RUBRO_INTERNO;

						row1HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row1HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tOracleInput_2 begin ] start
				 */

				ok_Hash.put("tOracleInput_2", false);
				start_Hash.put("tOracleInput_2", System.currentTimeMillis());

				currentComponent = "tOracleInput_2";

				int tos_count_tOracleInput_2 = 0;

				int nb_line_tOracleInput_2 = 0;
				java.sql.Connection conn_tOracleInput_2 = null;
				String driverClass_tOracleInput_2 = "oracle.jdbc.driver.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_2);

				String url_tOracleInput_2 = null;
				url_tOracleInput_2 = "jdbc:oracle:thin:@" + "10.20.0.7" + ":"
						+ "1521" + ":" + "UD";

				String dbUser_tOracleInput_2 = "SICGEFAD";

				final String decryptedPassword_tOracleInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("cd471b85ddbdbd5b7eb697d135b1c956f4f7aba1746784ea");

				String dbPwd_tOracleInput_2 = decryptedPassword_tOracleInput_2;

				conn_tOracleInput_2 = java.sql.DriverManager.getConnection(
						url_tOracleInput_2, dbUser_tOracleInput_2,
						dbPwd_tOracleInput_2);
				java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_2 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_2.next()) {
					sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_2)
						.setSessionTimeZone(sessionTimezone_tOracleInput_2);

				java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2
						.createStatement();

				String dbquery_tOracleInput_2 = "SELECT * FROM PR.PR_APROPIACION";

				globalMap.put("tOracleInput_2_QUERY", dbquery_tOracleInput_2);

				java.sql.ResultSet rs_tOracleInput_2 = null;
				try {
					rs_tOracleInput_2 = stmt_tOracleInput_2
							.executeQuery(dbquery_tOracleInput_2);
					java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2
							.getMetaData();
					int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2
							.getColumnCount();

					String tmpContent_tOracleInput_2 = null;

					while (rs_tOracleInput_2.next()) {
						nb_line_tOracleInput_2++;

						if (colQtyInRs_tOracleInput_2 < 1) {
							row2.VIGENCIA = null;
						} else {

							if (rs_tOracleInput_2.getObject(1) != null) {
								row2.VIGENCIA = rs_tOracleInput_2
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_2 < 2) {
							row2.RUBRO_INTERNO = null;
						} else {

							if (rs_tOracleInput_2.getObject(2) != null) {
								row2.RUBRO_INTERNO = rs_tOracleInput_2
										.getBigDecimal(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_2 < 3) {
							row2.CODIGO_COMPANIA = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(3);
							if (tmpContent_tOracleInput_2 != null) {
								row2.CODIGO_COMPANIA = tmpContent_tOracleInput_2;
							} else {
								row2.CODIGO_COMPANIA = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 4) {
							row2.CODIGO_UNIDAD_EJECUTORA = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(4);
							if (tmpContent_tOracleInput_2 != null) {
								row2.CODIGO_UNIDAD_EJECUTORA = tmpContent_tOracleInput_2;
							} else {
								row2.CODIGO_UNIDAD_EJECUTORA = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 5) {
							row2.VALOR_REZAGO = null;
						} else {

							if (rs_tOracleInput_2.getObject(5) != null) {
								row2.VALOR_REZAGO = rs_tOracleInput_2
										.getBigDecimal(5);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_2 < 6) {
							row2.VALOR_MODIFICACIONES = null;
						} else {

							if (rs_tOracleInput_2.getObject(6) != null) {
								row2.VALOR_MODIFICACIONES = rs_tOracleInput_2
										.getBigDecimal(6);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_2 < 7) {
							row2.VALOR = null;
						} else {

							if (rs_tOracleInput_2.getObject(7) != null) {
								row2.VALOR = rs_tOracleInput_2.getBigDecimal(7);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_2 < 8) {
							row2.TIPO_DOCUMENTO = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(8);
							if (tmpContent_tOracleInput_2 != null) {
								row2.TIPO_DOCUMENTO = tmpContent_tOracleInput_2;
							} else {
								row2.TIPO_DOCUMENTO = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 9) {
							row2.DOCUMENTOS_NUMERO = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(9);
							if (tmpContent_tOracleInput_2 != null) {
								row2.DOCUMENTOS_NUMERO = tmpContent_tOracleInput_2;
							} else {
								row2.DOCUMENTOS_NUMERO = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 10) {
							row2.DOCUMENTOS_FECHA = null;
						} else {

							if (rs_tOracleInput_2.getTimestamp(10) != null) {
								row2.DOCUMENTOS_FECHA = new java.util.Date(
										rs_tOracleInput_2.getTimestamp(10)
												.getTime());
							} else {
								row2.DOCUMENTOS_FECHA = null;
							}

						}
						if (colQtyInRs_tOracleInput_2 < 11) {
							row2.ID_LIMAY_PL = null;
						} else {

							if (rs_tOracleInput_2.getObject(11) != null) {
								row2.ID_LIMAY_PL = rs_tOracleInput_2
										.getBigDecimal(11);
							} else {

								row2.ID_LIMAY_PL = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 12) {
							row2.ID_LIMAY = null;
						} else {

							if (rs_tOracleInput_2.getObject(12) != null) {
								row2.ID_LIMAY = rs_tOracleInput_2
										.getBigDecimal(12);
							} else {

								row2.ID_LIMAY = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 13) {
							row2.ID_LIMAY_VF = null;
						} else {

							if (rs_tOracleInput_2.getObject(13) != null) {
								row2.ID_LIMAY_VF = rs_tOracleInput_2
										.getBigDecimal(13);
							} else {

								row2.ID_LIMAY_VF = null;
							}
						}

						/**
						 * [tOracleInput_2 begin ] stop
						 */

						/**
						 * [tOracleInput_2 main ] start
						 */

						currentComponent = "tOracleInput_2";

						tos_count_tOracleInput_2++;

						/**
						 * [tOracleInput_2 main ] stop
						 */

						/**
						 * [tJoin_1 main ] start
						 */

						currentComponent = "tJoin_1";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row3 = null;

						row3 = new row3Struct();
						row3.VIGENCIA = row2.VIGENCIA;
						row3.CODIGO_UNIDAD_EJECUTORA = row2.RUBRO_INTERNO;
						row3.VALOR_REZAGO = row2.CODIGO_COMPANIA;
						row3.VALOR = row2.CODIGO_UNIDAD_EJECUTORA;
						row3.TIPO_DOCUMENTO = row2.VALOR_REZAGO;
						row3.DOCUMENTOS_NUMERO = row2.VALOR_MODIFICACIONES;
						row3.DOCUMENTOS_FECHA = row2.VALOR;
						row3.id = row2.TIPO_DOCUMENTO;

						if (util_tJoin_1.isJoined(row2)) {
						}

						else {
							row3 = null;
						}
						// /////////////////////

						tos_count_tJoin_1++;

						/**
						 * [tJoin_1 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row3
							// row3

							if (execStat) {
								runStat.updateStatOnConnection("row3"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								salida_postgres = null;

								// # Output table : 'salida_postgres'
								salida_postgres_tmp.VIGENCIA = row3.VIGENCIA;
								salida_postgres_tmp.CODIGO_UNIDAD_EJECUTORA = row3.CODIGO_UNIDAD_EJECUTORA;
								salida_postgres_tmp.VALOR_REZAGO = row3.VALOR_REZAGO;
								salida_postgres_tmp.VALOR = row3.VALOR;
								salida_postgres_tmp.TIPO_DOCUMENTO = row3.TIPO_DOCUMENTO;
								salida_postgres_tmp.DOCUMENTOS_NUMERO = row3.DOCUMENTOS_NUMERO;
								salida_postgres_tmp.DOCUMENTOS_FECHA = row3.DOCUMENTOS_FECHA;
								salida_postgres_tmp.id = row3.id;
								salida_postgres = salida_postgres_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "salida_postgres"
							if (salida_postgres != null) {

								/**
								 * [tLogRow_2 main ] start
								 */

								currentComponent = "tLogRow_2";

								// salida_postgres
								// salida_postgres

								if (execStat) {
									runStat.updateStatOnConnection(
											"salida_postgres" + iterateId, 1, 1);
								}

								// /////////////////////

								strBuffer_tLogRow_2 = new StringBuilder();

								if (salida_postgres.VIGENCIA != null) { //

									strBuffer_tLogRow_2
											.append(salida_postgres.VIGENCIA
													.setScale(
															0,
															java.math.RoundingMode.HALF_UP)
													.toPlainString());

								} //

								strBuffer_tLogRow_2.append("|");

								if (salida_postgres.CODIGO_UNIDAD_EJECUTORA != null) { //

									strBuffer_tLogRow_2
											.append(String
													.valueOf(salida_postgres.CODIGO_UNIDAD_EJECUTORA));

								} //

								strBuffer_tLogRow_2.append("|");

								if (salida_postgres.VALOR_REZAGO != null) { //

									strBuffer_tLogRow_2
											.append(salida_postgres.VALOR_REZAGO
													.setScale(
															2,
															java.math.RoundingMode.HALF_UP)
													.toPlainString());

								} //

								strBuffer_tLogRow_2.append("|");

								if (salida_postgres.VALOR != null) { //

									strBuffer_tLogRow_2
											.append(salida_postgres.VALOR
													.setScale(
															2,
															java.math.RoundingMode.HALF_UP)
													.toPlainString());

								} //

								strBuffer_tLogRow_2.append("|");

								if (salida_postgres.TIPO_DOCUMENTO != null) { //

									strBuffer_tLogRow_2
											.append(String
													.valueOf(salida_postgres.TIPO_DOCUMENTO));

								} //

								strBuffer_tLogRow_2.append("|");

								if (salida_postgres.DOCUMENTOS_NUMERO != null) { //

									strBuffer_tLogRow_2
											.append(String
													.valueOf(salida_postgres.DOCUMENTOS_NUMERO));

								} //

								strBuffer_tLogRow_2.append("|");

								if (salida_postgres.DOCUMENTOS_FECHA != null) { //

									strBuffer_tLogRow_2
											.append(String
													.valueOf(salida_postgres.DOCUMENTOS_FECHA));

								} //

								strBuffer_tLogRow_2.append("|");

								if (salida_postgres.id != null) { //

									strBuffer_tLogRow_2
											.append(salida_postgres.id
													.setScale(
															0,
															java.math.RoundingMode.HALF_UP)
													.toPlainString());

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
											.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_2 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(
													System.out));
									globalMap.put("tLogRow_CONSOLE",
											consoleOut_tLogRow_2);
								}
								consoleOut_tLogRow_2
										.println(strBuffer_tLogRow_2.toString());
								consoleOut_tLogRow_2.flush();
								nb_line_tLogRow_2++;
								// ////

								// ////

								// /////////////////////

								tos_count_tLogRow_2++;

								/**
								 * [tLogRow_2 main ] stop
								 */

							} // End of branch "salida_postgres"

						} // End of branch "row3"

						/**
						 * [tOracleInput_2 end ] start
						 */

						currentComponent = "tOracleInput_2";

					}
				} finally {
					stmt_tOracleInput_2.close();

					if (conn_tOracleInput_2 != null
							&& !conn_tOracleInput_2.isClosed()) {

						conn_tOracleInput_2.close();

					}

				}

				globalMap.put("tOracleInput_2_NB_LINE", nb_line_tOracleInput_2);

				ok_Hash.put("tOracleInput_2", true);
				end_Hash.put("tOracleInput_2", System.currentTimeMillis());

				/**
				 * [tOracleInput_2 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("salida_postgres"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row1");

			try {

				/**
				 * [tOracleInput_2 finally ] start
				 */

				currentComponent = "tOracleInput_2";

				/**
				 * [tOracleInput_2 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_volcado_apropiacion = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal id;

		public BigDecimal getId() {
			return this.id;
		}

		public BigDecimal INTERNO_RUBRO;

		public BigDecimal getINTERNO_RUBRO() {
			return this.INTERNO_RUBRO;
		}

		public BigDecimal entidad;

		public BigDecimal getEntidad() {
			return this.entidad;
		}

		public String CODIGO;

		public String getCODIGO() {
			return this.CODIGO;
		}

		public BigDecimal vigencia;

		public BigDecimal getVigencia() {
			return this.vigencia;
		}

		public String descripcion;

		public String getDescripcion() {
			return this.descripcion;
		}

		public BigDecimal tipo_plan;

		public BigDecimal getTipo_plan() {
			return this.tipo_plan;
		}

		public String administracion;

		public String getAdministracion() {
			return this.administracion;
		}

		public BigDecimal estado;

		public BigDecimal getEstado() {
			return this.estado;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.INTERNO_RUBRO == null) ? 0
								: this.INTERNO_RUBRO.hashCode());

				result = prime
						* result
						+ ((this.vigencia == null) ? 0 : this.vigencia
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.INTERNO_RUBRO == null) {
				if (other.INTERNO_RUBRO != null)
					return false;

			} else if (!this.INTERNO_RUBRO.equals(other.INTERNO_RUBRO))

				return false;

			if (this.vigencia == null) {
				if (other.vigencia != null)
					return false;

			} else if (!this.vigencia.equals(other.vigencia))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.INTERNO_RUBRO = this.INTERNO_RUBRO;
			other.entidad = this.entidad;
			other.CODIGO = this.CODIGO;
			other.vigencia = this.vigencia;
			other.descripcion = this.descripcion;
			other.tipo_plan = this.tipo_plan;
			other.administracion = this.administracion;
			other.estado = this.estado;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.INTERNO_RUBRO = this.INTERNO_RUBRO;
			other.vigencia = this.vigencia;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_volcado_apropiacion) {

				try {

					int length = 0;

					this.INTERNO_RUBRO = (BigDecimal) dis.readObject();

					this.vigencia = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.INTERNO_RUBRO);

				// BigDecimal

				dos.writeObject(this.vigencia);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = (BigDecimal) ois.readObject();

				this.entidad = (BigDecimal) ois.readObject();

				this.CODIGO = readString(dis, ois);

				this.descripcion = readString(dis, ois);

				this.tipo_plan = (BigDecimal) ois.readObject();

				this.administracion = readString(dis, ois);

				this.estado = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.id);

				oos.writeObject(this.entidad);

				writeString(this.CODIGO, dos, oos);

				writeString(this.descripcion, dos, oos);

				oos.writeObject(this.tipo_plan);

				writeString(this.administracion, dos, oos);

				oos.writeObject(this.estado);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",INTERNO_RUBRO=" + String.valueOf(INTERNO_RUBRO));
			sb.append(",entidad=" + String.valueOf(entidad));
			sb.append(",CODIGO=" + CODIGO);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append(",descripcion=" + descripcion);
			sb.append(",tipo_plan=" + String.valueOf(tipo_plan));
			sb.append(",administracion=" + administracion);
			sb.append(",estado=" + String.valueOf(estado));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.INTERNO_RUBRO,
					other.INTERNO_RUBRO);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vigencia, other.vigencia);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tHash_row1 begin ] start
				 */

				ok_Hash.put("tHash_row1", false);
				start_Hash.put("tHash_row1", System.currentTimeMillis());

				currentComponent = "tHash_row1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tHash_row1 = 0;

				java.util.Map<row1Struct, row1Struct> tHash_row1 = new java.util.LinkedHashMap<row1Struct, row1Struct>();
				globalMap.put("tHash_row1", tHash_row1);

				/**
				 * [tHash_row1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.driver.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);

				String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@" + "10.20.0.7" + ":"
						+ "1521" + ":" + "UD";

				String dbUser_tOracleInput_1 = "SICGEFAD";

				final String decryptedPassword_tOracleInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("cd471b85ddbdbd5b7eb697d135b1c956f4f7aba1746784ea");

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				conn_tOracleInput_1 = java.sql.DriverManager.getConnection(
						url_tOracleInput_1, dbUser_tOracleInput_1,
						dbPwd_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.setSessionTimeZone(sessionTimezone_tOracleInput_1);

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "SELECT ROWNUM \"id\", TAB1.* FROM (SELECT\nINTERNO_RUBRO,\n1 \"entidad\",\nCODIGO_NIVEL1||'-'||CODIGO_NIVEL2||'-'||CODIGO_NIVEL3||'-'||CODIGO_NIVEL4||'-'||CODIGO_NIVEL5||'-'|\n |CODIGO_NIVEL6||'-'||CODIGO_NIVEL7||'-'||CODIGO_NIVEL8 CODIGO,\nVIGENCIA AS \"vigencia\",\nDESCRIPCION AS \"descripcion\",\n1 \"tipo_plan\",\n'1' \"administracion\",\n1 \"estado\"\nFROM PR.PR_V_RUBROS\nORDER BY VIGENCIA, CODIGO) TAB1";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = null;
				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1
							.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
							.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
							.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row1.id = null;
						} else {

							if (rs_tOracleInput_1.getObject(1) != null) {
								row1.id = rs_tOracleInput_1.getBigDecimal(1);
							} else {

								row1.id = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row1.INTERNO_RUBRO = null;
						} else {

							if (rs_tOracleInput_1.getObject(2) != null) {
								row1.INTERNO_RUBRO = rs_tOracleInput_1
										.getBigDecimal(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 3) {
							row1.entidad = null;
						} else {

							if (rs_tOracleInput_1.getObject(3) != null) {
								row1.entidad = rs_tOracleInput_1
										.getBigDecimal(3);
							} else {

								row1.entidad = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 4) {
							row1.CODIGO = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1
									.getString(4);
							if (tmpContent_tOracleInput_1 != null) {
								row1.CODIGO = tmpContent_tOracleInput_1;
							} else {
								row1.CODIGO = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 5) {
							row1.vigencia = null;
						} else {

							if (rs_tOracleInput_1.getObject(5) != null) {
								row1.vigencia = rs_tOracleInput_1
										.getBigDecimal(5);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 6) {
							row1.descripcion = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1
									.getString(6);
							if (tmpContent_tOracleInput_1 != null) {
								row1.descripcion = tmpContent_tOracleInput_1;
							} else {
								row1.descripcion = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 7) {
							row1.tipo_plan = null;
						} else {

							if (rs_tOracleInput_1.getObject(7) != null) {
								row1.tipo_plan = rs_tOracleInput_1
										.getBigDecimal(7);
							} else {

								row1.tipo_plan = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 8) {
							row1.administracion = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1
									.getString(8);
							if (tmpContent_tOracleInput_1 != null) {
								row1.administracion = tmpContent_tOracleInput_1;
							} else {
								row1.administracion = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 9) {
							row1.estado = null;
						} else {

							if (rs_tOracleInput_1.getObject(9) != null) {
								row1.estado = rs_tOracleInput_1
										.getBigDecimal(9);
							} else {

								row1.estado = null;
							}
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tHash_row1 main ] start
						 */

						currentComponent = "tHash_row1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.id = row1.id;
						row1_HashRow.INTERNO_RUBRO = row1.INTERNO_RUBRO;
						row1_HashRow.entidad = row1.entidad;
						row1_HashRow.CODIGO = row1.CODIGO;
						row1_HashRow.vigencia = row1.vigencia;
						row1_HashRow.descripcion = row1.descripcion;
						row1_HashRow.tipo_plan = row1.tipo_plan;
						row1_HashRow.administracion = row1.administracion;
						row1_HashRow.estado = row1.estado;
						tHash_row1.put(row1_HashRow, row1_HashRow);

						tos_count_tHash_row1++;

						/**
						 * [tHash_row1 main ] stop
						 */

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					stmt_tOracleInput_1.close();

					if (conn_tOracleInput_1 != null
							&& !conn_tOracleInput_1.isClosed()) {

						conn_tOracleInput_1.close();

					}

				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tHash_row1 end ] start
				 */

				currentComponent = "tHash_row1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tHash_row1", true);
				end_Hash.put("tHash_row1", System.currentTimeMillis());

				/**
				 * [tHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tHash_row1 finally ] start
				 */

				currentComponent = "tHash_row1";

				/**
				 * [tHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final volcado_apropiacion volcado_apropiacionClass = new volcado_apropiacion();

		int exitCode = volcado_apropiacionClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = volcado_apropiacion.class
					.getClassLoader().getResourceAsStream(
							"local_project/volcado_apropiacion_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_2) {
			globalMap.put("tOracleInput_2_SUBPROCESS_STATE", -1);

			e_tOracleInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : volcado_apropiacion");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 85588 characters generated by Talend Open Studio for Data Integration on the
 * 20 de junio de 2017 10:52:45 AM COT
 ************************************************************************************************/
