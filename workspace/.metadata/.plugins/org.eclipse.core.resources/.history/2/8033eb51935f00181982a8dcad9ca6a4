// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.copy_of_novedades_mes_dve_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Copy_of_novedades_mes_dve Purpose: *<br>
 * Description: * <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class Copy_of_novedades_mes_dve implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Copy_of_novedades_mes_dve";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Copy_of_novedades_mes_dve.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Copy_of_novedades_mes_dve.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class salida_defStruct implements
			routines.system.IPersistableRow<salida_defStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];

		public Integer identificacion;

		public Integer getIdentificacion() {
			return this.identificacion;
		}

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public Integer vigencia;

		public Integer getVigencia() {
			return this.vigencia;
		}

		public Double valor_bruto_nomina_actual;

		public Double getValor_bruto_nomina_actual() {
			return this.valor_bruto_nomina_actual;
		}

		public Integer valor_bruto_titan;

		public Integer getValor_bruto_titan() {
			return this.valor_bruto_titan;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length == 0) {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.identificacion = readInteger(dis);

					this.numero_contrato = readString(dis);

					this.vigencia = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valor_bruto_nomina_actual = null;
					} else {
						this.valor_bruto_nomina_actual = dis.readDouble();
					}

					this.valor_bruto_titan = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.identificacion, dos);

				// String

				writeString(this.numero_contrato, dos);

				// Integer

				writeInteger(this.vigencia, dos);

				// Double

				if (this.valor_bruto_nomina_actual == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valor_bruto_nomina_actual);
				}

				// Integer

				writeInteger(this.valor_bruto_titan, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("identificacion=" + String.valueOf(identificacion));
			sb.append(",numero_contrato=" + numero_contrato);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append(",valor_bruto_nomina_actual="
					+ String.valueOf(valor_bruto_nomina_actual));
			sb.append(",valor_bruto_titan=" + String.valueOf(valor_bruto_titan));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salida_defStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public Integer vigencia;

		public Integer getVigencia() {
			return this.vigencia;
		}

		public Integer identificacion;

		public Integer getIdentificacion() {
			return this.identificacion;
		}

		public Double valor_bruto_nomina_actual;

		public Double getValor_bruto_nomina_actual() {
			return this.valor_bruto_nomina_actual;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length == 0) {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.numero_contrato = readString(dis);

					this.vigencia = readInteger(dis);

					this.identificacion = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valor_bruto_nomina_actual = null;
					} else {
						this.valor_bruto_nomina_actual = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numero_contrato, dos);

				// Integer

				writeInteger(this.vigencia, dos);

				// Integer

				writeInteger(this.identificacion, dos);

				// Double

				if (this.valor_bruto_nomina_actual == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valor_bruto_nomina_actual);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numero_contrato=" + numero_contrato);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append(",identificacion=" + String.valueOf(identificacion));
			sb.append(",valor_bruto_nomina_actual="
					+ String.valueOf(valor_bruto_nomina_actual));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class salida_1Struct implements
			routines.system.IPersistableRow<salida_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public Integer vigencia;

		public Integer getVigencia() {
			return this.vigencia;
		}

		public Integer identificacion;

		public Integer getIdentificacion() {
			return this.identificacion;
		}

		public Double valor_bruto_nomina_actual;

		public Double getValor_bruto_nomina_actual() {
			return this.valor_bruto_nomina_actual;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length == 0) {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.numero_contrato = readString(dis);

					this.vigencia = readInteger(dis);

					this.identificacion = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valor_bruto_nomina_actual = null;
					} else {
						this.valor_bruto_nomina_actual = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numero_contrato, dos);

				// Integer

				writeInteger(this.vigencia, dos);

				// Integer

				writeInteger(this.identificacion, dos);

				// Double

				if (this.valor_bruto_nomina_actual == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valor_bruto_nomina_actual);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numero_contrato=" + numero_contrato);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append(",identificacion=" + String.valueOf(identificacion));
			sb.append(",valor_bruto_nomina_actual="
					+ String.valueOf(valor_bruto_nomina_actual));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salida_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];

		public Integer IDENTIFICACION;

		public Integer getIDENTIFICACION() {
			return this.IDENTIFICACION;
		}

		public Integer VALOR_BRUTO;

		public Integer getVALOR_BRUTO() {
			return this.VALOR_BRUTO;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.IDENTIFICACION = readInteger(dis);

					this.VALOR_BRUTO = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDENTIFICACION, dos);

				// Integer

				writeInteger(this.VALOR_BRUTO, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICACION=" + String.valueOf(IDENTIFICACION));
			sb.append(",VALOR_BRUTO=" + String.valueOf(VALOR_BRUTO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_1Struct implements
			routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];

		public Integer IDENTIFICACION;

		public Integer getIDENTIFICACION() {
			return this.IDENTIFICACION;
		}

		public Integer VALOR_BRUTO;

		public Integer getVALOR_BRUTO() {
			return this.VALOR_BRUTO;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.IDENTIFICACION = readInteger(dis);

					this.VALOR_BRUTO = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDENTIFICACION, dos);

				// Integer

				writeInteger(this.VALOR_BRUTO, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICACION=" + String.valueOf(IDENTIFICACION));
			sb.append(",VALOR_BRUTO=" + String.valueOf(VALOR_BRUTO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_1Process(globalMap);
				tPostgresqlInput_2Process(globalMap);
				tPostgresqlInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				salida_1Struct salida_1 = new salida_1Struct();
				salida_1Struct row3 = salida_1;
				salida_defStruct salida_def = new salida_defStruct();

				/**
				 * [tFileOutputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_3", false);
				start_Hash
						.put("tFileOutputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"salida_def" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_3 = 0;

				int columnIndex_tFileOutputExcel_3 = 0;

				int nb_line_tFileOutputExcel_3 = 0;

				String fileName_tFileOutputExcel_3 = "/home/mariaalejandra9404/Documentos/Titán/Prueba mayo/salida_comparacion.xls";
				java.io.File file_tFileOutputExcel_3 = new java.io.File(
						fileName_tFileOutputExcel_3);
				boolean isFileGenerated_tFileOutputExcel_3 = true;
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_3 = file_tFileOutputExcel_3
						.getParentFile();
				if (parentFile_tFileOutputExcel_3 != null
						&& !parentFile_tFileOutputExcel_3.exists()) {

					parentFile_tFileOutputExcel_3.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_3 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_3 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_3 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_3.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_3 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										fileName_tFileOutputExcel_3)), true,
						workbookSettings_tFileOutputExcel_3);

				writableSheet_tFileOutputExcel_3 = writeableWorkbook_tFileOutputExcel_3
						.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_3 == null) {
					writableSheet_tFileOutputExcel_3 = writeableWorkbook_tFileOutputExcel_3
							.createSheet("Sheet1",
									writeableWorkbook_tFileOutputExcel_3
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_3 = writableSheet_tFileOutputExcel_3
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_3 = new int[5];
				for (int i_tFileOutputExcel_3 = 0; i_tFileOutputExcel_3 < 5; i_tFileOutputExcel_3++) {
					int fitCellViewSize_tFileOutputExcel_3 = writableSheet_tFileOutputExcel_3
							.getColumnView(i_tFileOutputExcel_3).getSize();
					fitWidth_tFileOutputExcel_3[i_tFileOutputExcel_3] = fitCellViewSize_tFileOutputExcel_3 / 256;
					if (fitCellViewSize_tFileOutputExcel_3 % 256 != 0) {
						fitWidth_tFileOutputExcel_3[i_tFileOutputExcel_3] += 1;
					}
				}

				/**
				 * [tFileOutputExcel_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				salida_defStruct salida_def_tmp = new salida_defStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash
						.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("salida_1" + iterateId,
								0, 0);

					}
				}

				int tos_count_tFileOutputExcel_2 = 0;

				int columnIndex_tFileOutputExcel_2 = 0;

				int nb_line_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = "/home/mariaalejandra9404/Documentos/Titán/Prueba mayo/salida.xls";
				java.io.File file_tFileOutputExcel_2 = new java.io.File(
						fileName_tFileOutputExcel_2);
				boolean isFileGenerated_tFileOutputExcel_2 = true;
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2
						.getParentFile();
				if (parentFile_tFileOutputExcel_2 != null
						&& !parentFile_tFileOutputExcel_2.exists()) {

					parentFile_tFileOutputExcel_2.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_2.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										fileName_tFileOutputExcel_2)), true,
						workbookSettings_tFileOutputExcel_2);

				writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2
						.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_2 == null) {
					writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2
							.createSheet("Sheet1",
									writeableWorkbook_tFileOutputExcel_2
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_2 = new int[4];
				for (int i_tFileOutputExcel_2 = 0; i_tFileOutputExcel_2 < 4; i_tFileOutputExcel_2++) {
					int fitCellViewSize_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
							.getColumnView(i_tFileOutputExcel_2).getSize();
					fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] = fitCellViewSize_tFileOutputExcel_2 / 256;
					if (fitCellViewSize_tFileOutputExcel_2 % 256 != 0) {
						fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] += 1;
					}
				}

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				salida_1Struct salida_1_tmp = new salida_1Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_1.setEncoding("ISO-8859-15");

				Object source_tFileInputExcel_1 = "/home/mariaalejandra9404/Documentos/Titán/Prueba mayo/valores_brutos_nomina_salarios_mayo_hc.xls";
				final jxl.Workbook workbook_tFileInputExcel_1;

				java.io.InputStream toClose_tFileInputExcel_1 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
				try {
					if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_1 = (java.io.InputStream) source_tFileInputExcel_1;
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else if (source_tFileInputExcel_1 instanceof String) {
						toClose_tFileInputExcel_1 = new java.io.FileInputStream(
								source_tFileInputExcel_1.toString());
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else {
						workbook_tFileInputExcel_1 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_1 != null) {
							buffIStreamtFileInputExcel_1.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = java.util.Arrays
							.<jxl.Sheet> asList(workbook_tFileInputExcel_1
									.getSheets());
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 0;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += sheet_tFileInputExcel_1
									.getRows();
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_1 = null;
						jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRows();
							}
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getName());
							row1 = null;
							int tempRowLength_tFileInputExcel_1 = 2;

							int columnIndex_tFileInputExcel_1 = 0;

							//
							// end%>

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > row_tFileInputExcel_1.length ? row_tFileInputExcel_1.length
									: end_column_tFileInputExcel_1;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {

								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {

									jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i
											+ start_column_tFileInputExcel_1];
									temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
											.getContents();

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "IDENTIFICACION";
									row1.IDENTIFICACION = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row1.IDENTIFICACION = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "VALOR_BRUTO";
									row1.VALOR_BRUTO = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row1.VALOR_BRUTO = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								// row1
								// row1

								if (execStat) {
									runStat.updateStatOnConnection("row1"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row4"
								// /////////////////////////////////////////////

								boolean forceLooprow4 = false;

								row4Struct row4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									Object exprKeyValue_row4__num_documento = row1.IDENTIFICACION;
									if (exprKeyValue_row4__num_documento == null) {
										hasCasePrimitiveKeyWithNull_tMap_2 = true;
									} else {
										row4HashKey.num_documento = (int) (Integer) exprKeyValue_row4__num_documento;
									}

									row4HashKey.hashCodeDirty = true;

									if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

										tHash_Lookup_row4.lookup(row4HashKey);

									} // G_TM_M_091

									if (hasCasePrimitiveKeyWithNull_tMap_2
											|| !tHash_Lookup_row4.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4
												.getCount(row4HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.num_documento = '"
									// + row4HashKey.num_documento + "'");
								} // G 071

								row4Struct row4 = null;

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4.hasNext()) { // G
																			// 099

									fromLookup_row4 = tHash_Lookup_row4.next();

								} // G 099

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

								// /////////////////////////////////////////////
								// Starting Lookup Table "row7"
								// /////////////////////////////////////////////

								boolean forceLooprow7 = false;

								row7Struct row7ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									Object exprKeyValue_row7__contratista = row4.id_proveedor;
									if (exprKeyValue_row7__contratista == null) {
										hasCasePrimitiveKeyWithNull_tMap_2 = true;
									} else {
										row7HashKey.contratista = (double) (Double) exprKeyValue_row7__contratista;
									}

									row7HashKey.hashCodeDirty = true;

									if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

										tHash_Lookup_row7.lookup(row7HashKey);

									} // G_TM_M_091

									if (hasCasePrimitiveKeyWithNull_tMap_2
											|| !tHash_Lookup_row7.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7
												.getCount(row7HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.contratista = '"
									// + row7HashKey.contratista + "'");
								} // G 071

								row7Struct row7 = null;

								row7Struct fromLookup_row7 = null;
								row7 = row7Default;

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7.hasNext()) { // G
																			// 099

									fromLookup_row7 = tHash_Lookup_row7.next();

								} // G 099

								if (fromLookup_row7 != null) {
									row7 = fromLookup_row7;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									salida_1 = null;

									if (!rejectedInnerJoin_tMap_2) {

										// # Output table : 'salida_1'
										salida_1_tmp.numero_contrato = row7.numero_contrato;
										salida_1_tmp.vigencia = row7.vigencia;
										salida_1_tmp.identificacion = row1.IDENTIFICACION;
										salida_1_tmp.valor_bruto_nomina_actual = row1.VALOR_BRUTO;
										salida_1 = salida_1_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "salida_1"
								if (salida_1 != null) {

									/**
									 * [tFileOutputExcel_2 main ] start
									 */

									currentComponent = "tFileOutputExcel_2";

									// salida_1
									// salida_1

									if (execStat) {
										runStat.updateStatOnConnection(
												"salida_1" + iterateId, 1, 1);
									}

									if (salida_1.numero_contrato != null) {

										// modif start

										columnIndex_tFileOutputExcel_2 = 0;

										jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Label(
												columnIndex_tFileOutputExcel_2,
												startRowNum_tFileOutputExcel_2
														+ nb_line_tFileOutputExcel_2,

												// modif end
												salida_1.numero_contrato);
										// modif start
										// If we keep the cell format from the
										// existing cell in sheet

										// modif ends
										writableSheet_tFileOutputExcel_2
												.addCell(cell_0_tFileOutputExcel_2);
										int currentWith_0_tFileOutputExcel_2 = cell_0_tFileOutputExcel_2
												.getContents().trim().length();
										fitWidth_tFileOutputExcel_2[0] = fitWidth_tFileOutputExcel_2[0] > currentWith_0_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[0]
												: currentWith_0_tFileOutputExcel_2 + 2;
									}

									if (salida_1.vigencia != null) {

										// modif start

										columnIndex_tFileOutputExcel_2 = 1;

										jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Number(
												columnIndex_tFileOutputExcel_2,
												startRowNum_tFileOutputExcel_2
														+ nb_line_tFileOutputExcel_2,

												// modif end
												salida_1.vigencia);
										// modif start
										// If we keep the cell format from the
										// existing cell in sheet

										// modif ends
										writableSheet_tFileOutputExcel_2
												.addCell(cell_1_tFileOutputExcel_2);
										int currentWith_1_tFileOutputExcel_2 = String
												.valueOf(
														((jxl.write.Number) cell_1_tFileOutputExcel_2)
																.getValue())
												.trim().length();
										currentWith_1_tFileOutputExcel_2 = currentWith_1_tFileOutputExcel_2 > 10 ? 10
												: currentWith_1_tFileOutputExcel_2;
										fitWidth_tFileOutputExcel_2[1] = fitWidth_tFileOutputExcel_2[1] > currentWith_1_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[1]
												: currentWith_1_tFileOutputExcel_2 + 2;
									}

									if (salida_1.identificacion != null) {

										// modif start

										columnIndex_tFileOutputExcel_2 = 2;

										jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Number(
												columnIndex_tFileOutputExcel_2,
												startRowNum_tFileOutputExcel_2
														+ nb_line_tFileOutputExcel_2,

												// modif end
												salida_1.identificacion);
										// modif start
										// If we keep the cell format from the
										// existing cell in sheet

										// modif ends
										writableSheet_tFileOutputExcel_2
												.addCell(cell_2_tFileOutputExcel_2);
										int currentWith_2_tFileOutputExcel_2 = String
												.valueOf(
														((jxl.write.Number) cell_2_tFileOutputExcel_2)
																.getValue())
												.trim().length();
										currentWith_2_tFileOutputExcel_2 = currentWith_2_tFileOutputExcel_2 > 10 ? 10
												: currentWith_2_tFileOutputExcel_2;
										fitWidth_tFileOutputExcel_2[2] = fitWidth_tFileOutputExcel_2[2] > currentWith_2_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[2]
												: currentWith_2_tFileOutputExcel_2 + 2;
									}

									if (salida_1.valor_bruto_nomina_actual != null) {

										// modif start

										columnIndex_tFileOutputExcel_2 = 3;

										jxl.write.WritableCell cell_3_tFileOutputExcel_2 = new jxl.write.Number(
												columnIndex_tFileOutputExcel_2,
												startRowNum_tFileOutputExcel_2
														+ nb_line_tFileOutputExcel_2,

												// modif end
												salida_1.valor_bruto_nomina_actual);
										// modif start
										// If we keep the cell format from the
										// existing cell in sheet

										// modif ends
										writableSheet_tFileOutputExcel_2
												.addCell(cell_3_tFileOutputExcel_2);
										int currentWith_3_tFileOutputExcel_2 = String
												.valueOf(
														((jxl.write.Number) cell_3_tFileOutputExcel_2)
																.getValue())
												.trim().length();
										currentWith_3_tFileOutputExcel_2 = currentWith_3_tFileOutputExcel_2 > 10 ? 10
												: currentWith_3_tFileOutputExcel_2;
										fitWidth_tFileOutputExcel_2[3] = fitWidth_tFileOutputExcel_2[3] > currentWith_3_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[3]
												: currentWith_3_tFileOutputExcel_2 + 2;
									}

									nb_line_tFileOutputExcel_2++;

									row3 = salida_1;

									tos_count_tFileOutputExcel_2++;

									/**
									 * [tFileOutputExcel_2 main ] stop
									 */

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									// row3
									// row3

									if (execStat) {
										runStat.updateStatOnConnection("row3"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										Object exprKeyValue_row5__valor_calculado = row3.valor_bruto_nomina_actual;
										if (exprKeyValue_row5__valor_calculado == null) {
											hasCasePrimitiveKeyWithNull_tMap_1 = true;
										} else {
											row5HashKey.valor_calculado = (double) (Double) exprKeyValue_row5__valor_calculado;
										}

										row5HashKey.numero_contrato = row3.numero_contrato;

										row5HashKey.vigencia_contrato = row3.vigencia;

										row5HashKey.hashCodeDirty = true;

										if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

											tHash_Lookup_row5
													.lookup(row5HashKey);

										} // G_TM_M_091

									} // G_TM_M_020

									if (tHash_Lookup_row5 != null
											&& tHash_Lookup_row5
													.getCount(row5HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.valor_calculado = '"
										// + row5HashKey.valor_calculado +
										// "', row5.numero_contrato = '" +
										// row5HashKey.numero_contrato +
										// "', row5.vigencia_contrato = '" +
										// row5HashKey.vigencia_contrato + "'");
									} // G 071

									row5Struct row5 = null;

									row5Struct fromLookup_row5 = null;
									row5 = row5Default;

									if (tHash_Lookup_row5 != null
											&& tHash_Lookup_row5.hasNext()) { // G
																				// 099

										fromLookup_row5 = tHash_Lookup_row5
												.next();

									} // G 099

									if (fromLookup_row5 != null) {
										row5 = fromLookup_row5;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										salida_def = null;

										// # Output table : 'salida_def'
										salida_def_tmp.identificacion = row3.identificacion;
										salida_def_tmp.numero_contrato = row5.numero_contrato;
										salida_def_tmp.vigencia = row5.vigencia_contrato;
										salida_def_tmp.valor_bruto_nomina_actual = row3.valor_bruto_nomina_actual;
										salida_def_tmp.valor_bruto_titan = row5.valor_calculado;
										salida_def = salida_def_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "salida_def"
									if (salida_def != null) {

										/**
										 * [tFileOutputExcel_3 main ] start
										 */

										currentComponent = "tFileOutputExcel_3";

										// salida_def
										// salida_def

										if (execStat) {
											runStat.updateStatOnConnection(
													"salida_def" + iterateId,
													1, 1);
										}

										if (salida_def.identificacion != null) {

											// modif start

											columnIndex_tFileOutputExcel_3 = 0;

											jxl.write.WritableCell cell_0_tFileOutputExcel_3 = new jxl.write.Number(
													columnIndex_tFileOutputExcel_3,
													startRowNum_tFileOutputExcel_3
															+ nb_line_tFileOutputExcel_3,

													// modif end
													salida_def.identificacion);
											// modif start
											// If we keep the cell format from
											// the existing cell in sheet

											// modif ends
											writableSheet_tFileOutputExcel_3
													.addCell(cell_0_tFileOutputExcel_3);
											int currentWith_0_tFileOutputExcel_3 = String
													.valueOf(
															((jxl.write.Number) cell_0_tFileOutputExcel_3)
																	.getValue())
													.trim().length();
											currentWith_0_tFileOutputExcel_3 = currentWith_0_tFileOutputExcel_3 > 10 ? 10
													: currentWith_0_tFileOutputExcel_3;
											fitWidth_tFileOutputExcel_3[0] = fitWidth_tFileOutputExcel_3[0] > currentWith_0_tFileOutputExcel_3 ? fitWidth_tFileOutputExcel_3[0]
													: currentWith_0_tFileOutputExcel_3 + 2;
										}

										if (salida_def.numero_contrato != null) {

											// modif start

											columnIndex_tFileOutputExcel_3 = 1;

											jxl.write.WritableCell cell_1_tFileOutputExcel_3 = new jxl.write.Label(
													columnIndex_tFileOutputExcel_3,
													startRowNum_tFileOutputExcel_3
															+ nb_line_tFileOutputExcel_3,

													// modif end
													salida_def.numero_contrato);
											// modif start
											// If we keep the cell format from
											// the existing cell in sheet

											// modif ends
											writableSheet_tFileOutputExcel_3
													.addCell(cell_1_tFileOutputExcel_3);
											int currentWith_1_tFileOutputExcel_3 = cell_1_tFileOutputExcel_3
													.getContents().trim()
													.length();
											fitWidth_tFileOutputExcel_3[1] = fitWidth_tFileOutputExcel_3[1] > currentWith_1_tFileOutputExcel_3 ? fitWidth_tFileOutputExcel_3[1]
													: currentWith_1_tFileOutputExcel_3 + 2;
										}

										if (salida_def.vigencia != null) {

											// modif start

											columnIndex_tFileOutputExcel_3 = 2;

											jxl.write.WritableCell cell_2_tFileOutputExcel_3 = new jxl.write.Number(
													columnIndex_tFileOutputExcel_3,
													startRowNum_tFileOutputExcel_3
															+ nb_line_tFileOutputExcel_3,

													// modif end
													salida_def.vigencia);
											// modif start
											// If we keep the cell format from
											// the existing cell in sheet

											// modif ends
											writableSheet_tFileOutputExcel_3
													.addCell(cell_2_tFileOutputExcel_3);
											int currentWith_2_tFileOutputExcel_3 = String
													.valueOf(
															((jxl.write.Number) cell_2_tFileOutputExcel_3)
																	.getValue())
													.trim().length();
											currentWith_2_tFileOutputExcel_3 = currentWith_2_tFileOutputExcel_3 > 10 ? 10
													: currentWith_2_tFileOutputExcel_3;
											fitWidth_tFileOutputExcel_3[2] = fitWidth_tFileOutputExcel_3[2] > currentWith_2_tFileOutputExcel_3 ? fitWidth_tFileOutputExcel_3[2]
													: currentWith_2_tFileOutputExcel_3 + 2;
										}

										if (salida_def.valor_bruto_nomina_actual != null) {

											// modif start

											columnIndex_tFileOutputExcel_3 = 3;

											jxl.write.WritableCell cell_3_tFileOutputExcel_3 = new jxl.write.Number(
													columnIndex_tFileOutputExcel_3,
													startRowNum_tFileOutputExcel_3
															+ nb_line_tFileOutputExcel_3,

													// modif end
													salida_def.valor_bruto_nomina_actual);
											// modif start
											// If we keep the cell format from
											// the existing cell in sheet

											// modif ends
											writableSheet_tFileOutputExcel_3
													.addCell(cell_3_tFileOutputExcel_3);
											int currentWith_3_tFileOutputExcel_3 = String
													.valueOf(
															((jxl.write.Number) cell_3_tFileOutputExcel_3)
																	.getValue())
													.trim().length();
											currentWith_3_tFileOutputExcel_3 = currentWith_3_tFileOutputExcel_3 > 10 ? 10
													: currentWith_3_tFileOutputExcel_3;
											fitWidth_tFileOutputExcel_3[3] = fitWidth_tFileOutputExcel_3[3] > currentWith_3_tFileOutputExcel_3 ? fitWidth_tFileOutputExcel_3[3]
													: currentWith_3_tFileOutputExcel_3 + 2;
										}

										if (salida_def.valor_bruto_titan != null) {

											// modif start

											columnIndex_tFileOutputExcel_3 = 4;

											jxl.write.WritableCell cell_4_tFileOutputExcel_3 = new jxl.write.Number(
													columnIndex_tFileOutputExcel_3,
													startRowNum_tFileOutputExcel_3
															+ nb_line_tFileOutputExcel_3,

													// modif end
													salida_def.valor_bruto_titan);
											// modif start
											// If we keep the cell format from
											// the existing cell in sheet

											// modif ends
											writableSheet_tFileOutputExcel_3
													.addCell(cell_4_tFileOutputExcel_3);
											int currentWith_4_tFileOutputExcel_3 = String
													.valueOf(
															((jxl.write.Number) cell_4_tFileOutputExcel_3)
																	.getValue())
													.trim().length();
											currentWith_4_tFileOutputExcel_3 = currentWith_4_tFileOutputExcel_3 > 10 ? 10
													: currentWith_4_tFileOutputExcel_3;
											fitWidth_tFileOutputExcel_3[4] = fitWidth_tFileOutputExcel_3[4] > currentWith_4_tFileOutputExcel_3 ? fitWidth_tFileOutputExcel_3[4]
													: currentWith_4_tFileOutputExcel_3 + 2;
										}

										nb_line_tFileOutputExcel_3++;

										tos_count_tFileOutputExcel_3++;

										/**
										 * [tFileOutputExcel_3 main ] stop
										 */

									} // End of branch "salida_def"

								} // End of branch "salida_1"

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.close();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				writeableWorkbook_tFileOutputExcel_2.write();
				writeableWorkbook_tFileOutputExcel_2.close();

				globalMap.put("tFileOutputExcel_2_NB_LINE",
						nb_line_tFileOutputExcel_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("salida_1" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_3 end ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				writeableWorkbook_tFileOutputExcel_3.write();
				writeableWorkbook_tFileOutputExcel_3.close();

				globalMap.put("tFileOutputExcel_3_NB_LINE",
						nb_line_tFileOutputExcel_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"salida_def" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_3", true);
				end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_3 finally ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				/**
				 * [tFileOutputExcel_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public double id_proveedor;

		public double getId_proveedor() {
			return this.id_proveedor;
		}

		public int num_documento;

		public int getNum_documento() {
			return this.num_documento;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.num_documento;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.num_documento != other.num_documento)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_proveedor = this.id_proveedor;
			other.num_documento = this.num_documento;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.num_documento = this.num_documento;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.num_documento = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.num_documento);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_proveedor = dis.readDouble();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeDouble(this.id_proveedor);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_proveedor=" + String.valueOf(id_proveedor));
			sb.append(",num_documento=" + String.valueOf(num_documento));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.num_documento,
					other.num_documento);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];

		public double id_proveedor;

		public double getId_proveedor() {
			return this.id_proveedor;
		}

		public String num_documento;

		public String getNum_documento() {
			return this.num_documento;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length == 0) {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.id_proveedor = dis.readDouble();

					this.num_documento = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.id_proveedor);

				// String

				writeString(this.num_documento, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_proveedor=" + String.valueOf(id_proveedor));
			sb.append(",num_documento=" + num_documento);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tConvertType_2 - inputs:(row2)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_2 - inputs:(row1,row4,row7)
				// outputs:(salida_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tConvertType_2 begin ] start
				 */

				ok_Hash.put("tConvertType_2", false);
				start_Hash.put("tConvertType_2", System.currentTimeMillis());

				currentComponent = "tConvertType_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_2 = 0;

				int nb_line_tConvertType_2 = 0;

				/**
				 * [tConvertType_2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_1);
				String dbUser_tPostgresqlInput_1 = "wtitan_job";

				final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("dc0f784ffb50c07f4a2257b21ef94b35");

				String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;

				String url_tPostgresqlInput_1 = "jdbc:postgresql://"
						+ "pgtst.udistritaloas.edu.co" + ":" + "5432" + "/"
						+ "udistrital";

				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_1, dbUser_tPostgresqlInput_1,
						dbPwd_tPostgresqlInput_1);

				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT id_proveedor, num_documento FROM agora.informacion_proveedor";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row2.id_proveedor = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row2.id_proveedor = rs_tPostgresqlInput_1
										.getDouble(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row2.num_documento = null;
						} else {

							row2.num_documento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 2, false);
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tConvertType_2 main ] start
						 */

						currentComponent = "tConvertType_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row4 = new row4Struct();
						boolean bHasError_tConvertType_2 = false;
						try {
							row4.id_proveedor = TypeConvert
									.double2double(row2.id_proveedor);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_2 = true;
							System.err.println(e.getMessage());
						}
						try {
							row4.num_documento = TypeConvert
									.String2int(row2.num_documento);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_2 = true;
							System.err.println(e.getMessage());
						}
						if (bHasError_tConvertType_2) {
							row4 = null;
						}

						nb_line_tConvertType_2++;

						tos_count_tConvertType_2++;

						/**
						 * [tConvertType_2 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.id_proveedor = row4.id_proveedor;

							row4_HashRow.num_documento = row4.num_documento;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

					if (conn_tPostgresqlInput_1 != null
							&& !conn_tPostgresqlInput_1.isClosed()) {

						conn_tPostgresqlInput_1.commit();

						conn_tPostgresqlInput_1.close();

					}

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tConvertType_2 end ] start
				 */

				currentComponent = "tConvertType_2";

				globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_2", true);
				end_Hash.put("tConvertType_2", System.currentTimeMillis());

				/**
				 * [tConvertType_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tConvertType_2 finally ] start
				 */

				currentComponent = "tConvertType_2";

				/**
				 * [tConvertType_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public int vigencia;

		public int getVigencia() {
			return this.vigencia;
		}

		public double contratista;

		public double getContratista() {
			return this.contratista;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.contratista;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.contratista != other.contratista)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.numero_contrato = this.numero_contrato;
			other.vigencia = this.vigencia;
			other.contratista = this.contratista;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.contratista = this.contratista;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.contratista = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.contratista);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.numero_contrato = readString(dis, ois);

				this.vigencia = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.numero_contrato, dos, oos);

				dos.writeInt(this.vigencia);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numero_contrato=" + numero_contrato);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append(",contratista=" + String.valueOf(contratista));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.contratista,
					other.contratista);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tFileInputExcel_1) outputs:(row7,row7) | target
				// node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(row1,row4,row7)
				// outputs:(salida_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_2);
				String dbUser_tPostgresqlInput_2 = "wtitan_job";

				final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("dc0f784ffb50c07f4a2257b21ef94b35");

				String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;

				String url_tPostgresqlInput_2 = "jdbc:postgresql://"
						+ "pgtst.udistritaloas.edu.co" + ":" + "5432" + "/"
						+ "udistrital";

				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_2, dbUser_tPostgresqlInput_2,
						dbPwd_tPostgresqlInput_2);

				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT numero_contrato, vigencia ,\n  contratista FROM argo.contrato_general where SUBSTRING (numero_contrato, 0, 4 ) = 'DVE'";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row7.numero_contrato = null;
						} else {

							row7.numero_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 1, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row7.vigencia = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(2) != null) {
								row7.vigencia = rs_tPostgresqlInput_2.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 3) {
							row7.contratista = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(3) != null) {
								row7.contratista = rs_tPostgresqlInput_2
										.getDouble(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.numero_contrato = row7.numero_contrato;

						row7_HashRow.vigencia = row7.vigencia;

						row7_HashRow.contratista = row7.contratista;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

					if (conn_tPostgresqlInput_2 != null
							&& !conn_tPostgresqlInput_2.isClosed()) {

						conn_tPostgresqlInput_2.commit();

						conn_tPostgresqlInput_2.close();

					}

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public double valor_calculado;

		public double getValor_calculado() {
			return this.valor_calculado;
		}

		public String numero_contrato;

		public String getNumero_contrato() {
			return this.numero_contrato;
		}

		public Integer vigencia_contrato;

		public Integer getVigencia_contrato() {
			return this.vigencia_contrato;
		}

		public Double dias_liquidados;

		public Double getDias_liquidados() {
			return this.dias_liquidados;
		}

		public int tipo_preliquidacion;

		public int getTipo_preliquidacion() {
			return this.tipo_preliquidacion;
		}

		public int preliquidacion;

		public int getPreliquidacion() {
			return this.preliquidacion;
		}

		public int concepto;

		public int getConcepto() {
			return this.concepto;
		}

		public Integer estado_disponibilidad;

		public Integer getEstado_disponibilidad() {
			return this.estado_disponibilidad;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.valor_calculado;

				result = prime
						* result
						+ ((this.numero_contrato == null) ? 0
								: this.numero_contrato.hashCode());

				result = prime
						* result
						+ ((this.vigencia_contrato == null) ? 0
								: this.vigencia_contrato.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.valor_calculado != other.valor_calculado)
				return false;

			if (this.numero_contrato == null) {
				if (other.numero_contrato != null)
					return false;

			} else if (!this.numero_contrato.equals(other.numero_contrato))

				return false;

			if (this.vigencia_contrato == null) {
				if (other.vigencia_contrato != null)
					return false;

			} else if (!this.vigencia_contrato.equals(other.vigencia_contrato))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.id = this.id;
			other.valor_calculado = this.valor_calculado;
			other.numero_contrato = this.numero_contrato;
			other.vigencia_contrato = this.vigencia_contrato;
			other.dias_liquidados = this.dias_liquidados;
			other.tipo_preliquidacion = this.tipo_preliquidacion;
			other.preliquidacion = this.preliquidacion;
			other.concepto = this.concepto;
			other.estado_disponibilidad = this.estado_disponibilidad;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.valor_calculado = this.valor_calculado;
			other.numero_contrato = this.numero_contrato;
			other.vigencia_contrato = this.vigencia_contrato;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve.length == 0) {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Copy_of_novedades_mes_dve,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Copy_of_novedades_mes_dve) {

				try {

					int length = 0;

					this.valor_calculado = dis.readDouble();

					this.numero_contrato = readString(dis);

					this.vigencia_contrato = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.valor_calculado);

				// String

				writeString(this.numero_contrato, dos);

				// Integer

				writeInteger(this.vigencia_contrato, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

				length = dis.readByte();
				if (length == -1) {
					this.dias_liquidados = null;
				} else {
					this.dias_liquidados = dis.readDouble();
				}

				this.tipo_preliquidacion = dis.readInt();

				this.preliquidacion = dis.readInt();

				this.concepto = dis.readInt();

				this.estado_disponibilidad = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

				if (this.dias_liquidados == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.dias_liquidados);
				}

				dos.writeInt(this.tipo_preliquidacion);

				dos.writeInt(this.preliquidacion);

				dos.writeInt(this.concepto);

				writeInteger(this.estado_disponibilidad, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",valor_calculado=" + String.valueOf(valor_calculado));
			sb.append(",numero_contrato=" + numero_contrato);
			sb.append(",vigencia_contrato=" + String.valueOf(vigencia_contrato));
			sb.append(",dias_liquidados=" + String.valueOf(dias_liquidados));
			sb.append(",tipo_preliquidacion="
					+ String.valueOf(tipo_preliquidacion));
			sb.append(",preliquidacion=" + String.valueOf(preliquidacion));
			sb.append(",concepto=" + String.valueOf(concepto));
			sb.append(",estado_disponibilidad="
					+ String.valueOf(estado_disponibilidad));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.valor_calculado,
					other.valor_calculado);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.numero_contrato,
					other.numero_contrato);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vigencia_contrato,
					other.vigencia_contrato);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tFileInputExcel_1) outputs:(row5,row5) | target
				// node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row3,row5) outputs:(salida_def)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_3);
				String dbUser_tPostgresqlInput_3 = "crud_user";

				final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;

				String url_tPostgresqlInput_3 = "jdbc:postgresql://"
						+ "10.20.0.159" + ":" + "5432" + "/"
						+ "udistrital_core_db";

				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_3, dbUser_tPostgresqlInput_3,
						dbPwd_tPostgresqlInput_3);

				conn_tPostgresqlInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT id, valor_calculado, numero_contrato, vigencia_contrato, dias_liquidados, tipo_preliquidacion, preliquidacion, concepto,\n  estado_disponibilidad FROM administrativa.detalle_preliquidacion where preliquidacion = 10;";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);

				java.sql.ResultSet rs_tPostgresqlInput_3 = null;
				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row5.id = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								row5.id = rs_tPostgresqlInput_3.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row5.valor_calculado = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(2) != null) {
								row5.valor_calculado = rs_tPostgresqlInput_3
										.getDouble(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row5.numero_contrato = null;
						} else {

							row5.numero_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_3, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 4) {
							row5.vigencia_contrato = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(4) != null) {
								row5.vigencia_contrato = rs_tPostgresqlInput_3
										.getInt(4);
							} else {
								row5.vigencia_contrato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 5) {
							row5.dias_liquidados = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(5) != null) {
								row5.dias_liquidados = rs_tPostgresqlInput_3
										.getDouble(5);
							} else {
								row5.dias_liquidados = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 6) {
							row5.tipo_preliquidacion = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(6) != null) {
								row5.tipo_preliquidacion = rs_tPostgresqlInput_3
										.getInt(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 7) {
							row5.preliquidacion = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(7) != null) {
								row5.preliquidacion = rs_tPostgresqlInput_3
										.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 8) {
							row5.concepto = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(8) != null) {
								row5.concepto = rs_tPostgresqlInput_3.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 9) {
							row5.estado_disponibilidad = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(9) != null) {
								row5.estado_disponibilidad = rs_tPostgresqlInput_3
										.getInt(9);
							} else {
								row5.estado_disponibilidad = null;
							}
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.id = row5.id;

						row5_HashRow.valor_calculado = row5.valor_calculado;

						row5_HashRow.numero_contrato = row5.numero_contrato;

						row5_HashRow.vigencia_contrato = row5.vigencia_contrato;

						row5_HashRow.dias_liquidados = row5.dias_liquidados;

						row5_HashRow.tipo_preliquidacion = row5.tipo_preliquidacion;

						row5_HashRow.preliquidacion = row5.preliquidacion;

						row5_HashRow.concepto = row5.concepto;

						row5_HashRow.estado_disponibilidad = row5.estado_disponibilidad;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					stmt_tPostgresqlInput_3.close();

					if (conn_tPostgresqlInput_3 != null
							&& !conn_tPostgresqlInput_3.isClosed()) {

						conn_tPostgresqlInput_3.commit();

						conn_tPostgresqlInput_3.close();

					}

				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Copy_of_novedades_mes_dve Copy_of_novedades_mes_dveClass = new Copy_of_novedades_mes_dve();

		int exitCode = Copy_of_novedades_mes_dveClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Copy_of_novedades_mes_dve.class
					.getClassLoader().getResourceAsStream(
							"local_project/copy_of_novedades_mes_dve_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Copy_of_novedades_mes_dve");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 139704 characters generated by Talend Open Studio for Data Integration on the
 * 24 de mayo de 2018 08:43:34 PM GMT
 ************************************************************************************************/
